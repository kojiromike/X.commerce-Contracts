@namespace("com.x.ocl")

protocol Core {

	/**
	 * Operator
	 */
	enum Operator
	{
		EQUALS,
		NOT_EQUALS,
		GREATER_THAN,
		GREATER_THAN_EQUALS,
		LESS_THAN,
		LESS_THAN_EQUALS
	}
	
	/**
	 * Predicate
	 */
	record Predicate
	{
		string field;

		Operator operator;

		array<string> values;
	}

	/**
	 * Sort order
	 */
	enum SortOrder
	{
		ASCENDING,
		DESCENDING
	}

	/**
	 * Order by
	 */
	record OrderBy
	{
		string field;

		SortOrder sortOrder;
	}

	/**
	 * Specifies the page of results to return in the response
	 */
	record Paging
	{
		int startIndex;
 
 		/** Number of items to return per page */
		int pageSize;
	}

	/**
	 * Query that corresponds to the report
	 */
	record Query
	{
		/**
		 * Fields to be selected. These will be 'columns' in the report
		 */
		array<string> fields;
		
		/**
		 * Specifies how an entity should be filtered. Essentially, the WHERE
		 * clause
		 */
		array<Predicate> predicates;

		/**
		 * Fields on which the report should be sorted. The order is significant -
		 * first field determines primary sort order, the next determines
		 * secondary sort order, etc.
		 */
		array<OrderBy> ordering;

		/**
		 * Pagination information
		 */
		Paging paging;
	}

	/**
	 * Query Result
	 * The result of a query can be null, in which case the Error structure
	 * will indicate the error.
	 * In the successful case, the result is zero or more rows, each containing
	 * one or more columns. The order of the columns would correspond to the
	 * order of the fields in the Query record.
	 * While the type of column supported is a string now, this can be enhanced
	 * by adding additional types to the inner union.
	 */
	record QueryResult
	{
		//TODO: this needs to be fixed to support named types.
		union {null, array<array<union{string}>>} data;
	}

}