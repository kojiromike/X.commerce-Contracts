/*
 * Copyright (c) 2011 X.commerce
 *
 * By downloading this file from this repository, you are agreeing to the terms and conditions of the
 * license that govern the X.commerce Contrarcts.  The license is available at
 * https://www.x.com/developers/xcommerce/products/developer-package/license.
 */

@namespace("com.x.service.marketplace.message")

/*
	The Marketplace protocol defines the schema that is common across
	all marketplace.  All marketplace adapters must implement the 
	appropriate behavior for the interfaces defined here for its
	marketplace.
	
	Market specific behaviors should be defined in its own protocol.
	The extension point in this schema is defined in a "marketSpecific"
	element of certain types.
*/

protocol Marketplace {

	/*
		A marketplace site represents a sub-section of the marketplace.
		The site often defines the country specific behavior of the market.
	*/	
	record Site {
		string id;
		string name;
	}
	
	/*
		Each marketplace adapter will requires a different set of
		credential keys with its own name/value. Please
		check the marketplace adapter documentation for specific
		requirements.
	*/
	record Credential {
		map<string> properties;
	}
	
	record CurrencyAmount {
		double amount;
		string code;
	}
	
	enum ShippingLocaleType {
		DOMESTIC,
		INTERNATIONAL
	}
	
	enum ShippingRateType {
		FLAT,
		CALCULATED,
		FREIGHT
	}

	/*
		This is the shipping related metadata that each marketplace uses
		to define the types of shipping options available.
	*/
	record SupportedShippingService {
		string description;
		union{null,string} carrier; //USPS
		string serviceName; //i.e. USPSPriorityFlatRateBox
		int shippingTimeMax; //in days
		int shippingTimeMin;
		union{null, ShippingRateType} rateType;
		
		boolean dimensionsRequired;
		boolean weightRequired;
		boolean surchargeApplicable;
	}
	
	record ShippingServiceOption {
		int sellerPriority;
		string serviceName;
		CurrencyAmount cost;
		union{null,CurrencyAmount} discountAmount;
		union{null,CurrencyAmount} additionalCost;
		union{null,CurrencyAmount} packagingHandlingCost;
		union{null,CurrencyAmount} surcharge;  // UPS or FedEx to Alaska, Hawaii or Puerto Rico only.
		union{null,array<string>} shipToLocations;  // International shipping only
	}
	
	record ShippingLocaleService {
		ShippingRateType rateType;  // Flat, calculated, etc
		ShippingLocaleType localeType;  // Domestic or international
		boolean applyPromotionalShippingRule;
		array<ShippingServiceOption> shippingServiceOptions;
	}

	/*
		Use this during profile creation or listing to indicate the type of shipping
		available for your listing.
	*/
	record Shipping {
		//FUTURE: add shipping elements that are common to domestic/international, flat/calculated.
		array<ShippingLocaleService> shippingLocaleServices;  // Domestic and/or international shipping
	}
	
	enum PaymentMethod {
		AMEX,
		CASH_ON_DELIVERY,
		CHECK,
		CREDIT_CARD,
		DINERS,
		DISCOVER,
		ESCROW,
		INTEGRATED_MERCHANT_CREDIT_CARD,
		MASTERCARD,
		MONEY_ORDER,
		MONEY_TRANSFER,
		MONEY_TRANSFER_IN_CHECKOUT,
		MONEYBOOKERS,
		PAYMATE,
		PAYMENT_ON_PICKUP,
		PAYMENT_SEE_DESCRIPTION,
		PAYPAL,
		PROPAY,
		VISA
	}
	
	record Payment {
		union{null,array<PaymentMethod>} acceptedPaymentTypes;
		union{null,boolean} immediatePaymentRequired;
		union{null,string} paymentInstructions;
	}
	
	enum RefundMethod {
		MONEY_BACK,
		EXCHANGE_ONLY,
		STORE_CREDIT
	}

	record SupportedReturnPolicy {
		boolean returnsAccepted;
		array<RefundMethod> method;
		int maxReturnByDays;
	}
	
	record ReturnPolicy {
		union{null,string} description;
		union{null,boolean} returnAccepted;
		union{null,boolean} buyerPaysReturnShipping;
		union{null,int} returnByDays;
		union{null,RefundMethod} refundMethod;
	}
	
	/*
		A marketplace profile defines the default policies that a merchant
		will use for listings on that marketplace.
	*/
	record MarketplaceProfile {
		union{null,string} xId; //ID provided by X.commerce
		string name;  // unigue name given to this profile
		string siteCode;  // Site the item should be listed to.  In most cases, this will be the ISO country code.
		
		//Usually, this contains the authId that was obtained when initializing
		//authorization for the marketplace
		Credential cred; 

		union{null,Payment} payment;
		union{null,Shipping} shipping;
		union{null,ReturnPolicy} returnPolicy;
		
		/*
		The following is a market specific data "blob" that is encoded
		using the avro schema of the specific marketplace profile data.
		ie, payPalEmailAddress for eBay
		*/
		union{null,bytes} marketSpecifics; 		
	}

	record ProductCategory {
		Site site;
		string id;
		string name;
		string parentCatId;
		boolean isLeaf;
	}
	
	record Category {
		string id;
		string name;
		string parentId;
		boolean catalogEnabled;
		int categoryLevel;
		boolean leafCategory;
	}
	
	record CustomCategory {
		long id;
		string name;
		int order;
		array<CustomCategory> childCategories;
	}
	
	record AttributeRecommendations {
		string categoryId;
		map<array<string>> nameValues;
	}

	enum StandardProductIdType {
		ISBN,
		UPC,
		EAN,
		ASIN
	}
	
	record StandardProductId {
		StandardProductIdType type;
		string value;
	}
	
	enum ImagePurpose {
		FEATURED, 
		GALLERY,
		THUMBNAIL
	}
	
	record ProductImage {
		ImagePurpose purpose;
		string locationURL;
	}
	
	record ProductAttribute {
		string name;
		array<string> value;
	}
		
	record ProductDetails {
		//ID as assigned by X catalog service or null if this is not a catalog product
		union{null,string} xId;
		string sku;//Only sku is required for a listing update.
		union{null,array<StandardProductId>} productId;
		union{null,string} manufacturer;
		union{null,string} mpn;
		union{null,string} brand;
		union{null,CurrencyAmount} msrp;
		union{null,array<ProductImage>} imageURL;
		union{null,string} description;
		union{null,string} condition;
		union{null,array<ProductAttribute>} attributes;
	}
	
	record Listing {
		union{null,string} xId; //Identifier as known by the X.commerce adapter.
		union{null,string} marketItemId; //Unique id as known by marketplace i.e. ASIN, etc..
	
		ProductDetails product;
		union{null,long} startTime; //a unix time stamp
		union{null,CurrencyAmount} price;
		union{null,int} quantity;
		union{null,string} title;		
		
		/*
			Following are fields that are optionally supported
			across marketplaces.  Will be ignored if market does
			not support this.
		*/
		union{null,string} subTitle;		
		union{null,boolean} giftWrapAvailable;
		//Indicates where in the marketplace category to list
		union{null,array<string>} marketCategories;
		
		//Following data can override data in a specified profile
		union{null,Payment} payment;
		union{null,Shipping} shipping;
		union{null,ReturnPolicy} returnPolicy;
		
		/*
			The following is a market specific data "blob" that is encoded
			using the avro schema of the specific marketplace this listing is intended for.
		*/
		union{null,bytes} marketSpecifics; 
	}
	
	record ListingFilter {
		union{null,array<string>} skus;
		union{null,long} startTime; //unix time
		union{null,long} endTime;
	}
	
	record Address {
		string street1;
		union{null,string} street2;
		string city;
		union{null,string} county;
		string stateOrProvince;
		string country;
		string postalCode;
	}
	
	record TrackingDetail {
		string trackingNumber;
		union{null,string} carrier;
		union{null,string} service;
	}

	record Shipment {
		string shipmentId; //id unique to the order
		Address address;
		ShippingServiceOption shippingServiceOption;
		union{null,array<TrackingDetail>} trackingDetails;
		union{null,string} recipientName;
		union{null,int} weight;
		union{null,string} shippingDescription;
	}
	
	record CustomerInfo {
		union{null,string} userMarketId;
		union{null,string} email;
		union{null,string} name;
		union{null,string} phone;
	}
	
	record OrderItem {
		string marketListingId;
		union{null, string} listingTitle;
		string listingURL;
		string status;
		string sku;
		int quantity;
		union{null, CurrencyAmount} cost;
		union{null, CurrencyAmount} insuranceCost;
		union{null, CurrencyAmount} taxAmount;
		union{null, CurrencyAmount} discountAmount;
		string shipmentId;  // Ties to the shipment.
		
		union{null,boolean} giftWrap;
		union{null,string} giftWrapText;
		
		/*
			The following is a market specific data "blob" that is encoded
			using the avro schema of the specific marketplace this order is intended for.
		*/
		union{null,bytes} marketSpecifics; 
	}
	
	record Order {
		long orderTime;
		string channel;
		string marketOrderId;
		CustomerInfo customer;
		array<OrderItem> items;
		union{null, CurrencyAmount} totalInsuranceCost;
		union{null, CurrencyAmount} totalTaxAmount;
		union{null, CurrencyAmount} totalDiscountAmount;
		CurrencyAmount totalAmount;
		string status;
		union{null, PaymentMethod} paymentMethod;
		array<Shipment> shipments;
		
		/*
			The following is a market specific data "blob" that is encoded
			using the avro schema of the specific marketplace this order is intended for.
		*/
		union{null,bytes} marketSpecifics; 
	}

	record OrderShipmentUpdate {
		string shipmentId;
		array<TrackingDetail> trackingDetails;
	}
		
	record OrderUpdate {
		string marketOrderId;
		union{null,boolean} processed;
		union{null,OrderShipmentUpdate} orderShipmentUpdate;
	}
	
	record OrderFilter {
		long startTime;
		union{null,long} endTime;
		union{null,string} status;
	}
	
	record OrderUpdateError {
		OrderUpdate orderUpdate;
		string log;
	}
	
	record ListingError {
		union{null,Listing} listing;
		string log;
	}
	
	record ListingUpdateError {
		Listing listing;
		string log;
	}

	record CancelListingError {
		string sku;
		string log;
	}
		
	//###########################################################
	//  THE SECTION BELOW ARE SUPPORTED TOPICS/MESSAGES
	//###########################################################
	@topic("/marketplace/site/find")
	record GetMarketSitesMessage {
	}
	
	@topic("/marketplace/site/find/success")
	record MarketSitesMessage {
		array<Site> sites;
		string marketplace;
		string destinationId;
	}
	
	@topic("/marketplace/site/find/fail")
	record FailedGetMarketSitesMessage {
		string marketplace;
		string log;
	}
	
	@topic("/marketplace/returnPolicy/find")
	record GetSiteSupportedReturnPolicyMessage {
		string siteCode;
	}
	
	@topic("/marketplace/returnPolicy/find/success")
	record SiteSupportedReturnPolicyMessage {
		SupportedReturnPolicy policy;
		string siteCode;
		string marketplace;		
	}
	
	@topic("/marketplace/returnPolicy/find/fail")
	record FailedGetSiteSupportedReturnPolicyMessage {
		string siteCode;
		string marketplace;
		string log;
	}
	
	@topic("/marketplace/shippingService/find")
	record GetSiteSupportedShippingServicesMessage {
		string siteCode;
	}
	
	@topic("/marketplace/shippingService/find/success")
	record SiteSupportedShippingServicesMessage {
		array<SupportedShippingService> services;
		string siteCode;
		string marketplace;
	}
	
	@topic("/marketplace/shippingService/find/fail")
	record FailedGetSiteSupportedShippingServicesMessage {
		string siteCode;
		string marketplace;
		string log;
	}
	
	@topic("/marketplace/currency/find")
	record GetSiteSupportedCurrencyMessage {
		string siteCode;
	}
	
	@topic("/marketplace/currency/find/success")
	record SiteSupportedCurrencyMessage {
		array<string> currencies;
		string siteCode;
		string marketplace;
	}
	
	@topic("/marketplace/currency/find/fail")
	record FailedGetSiteSupportedCurrencyMessage {
		string siteCode;
		string marketplace;
		string log;
	}
	
	@topic("/marketplace/paymentMethod/find")
	record GetSiteSupportedPaymentMethodMessage {
		string siteCode;
	}
	
	@topic("/marketplace/paymentMethod/find/success")
	record SiteSupportedPaymentMethodMessage {
		array<PaymentMethod> methods;
		string siteCode;
		string marketplace;
	}
	
	@topic("/marketplace/paymentMethod/find/fail")
	record FailedGetSiteSupportedPaymentMethodMessage {
		string siteCode;
		string marketplace;
		string log;
	}
	
	@topic("/marketplace/category/find")
	record GetMarketplaceCategoriesMessage {
		string siteCode;
	}
	
	@topic("/marketplace/category/find/success")
	record MarketplaceCategoriesMessage {
		array<Category> categories;
		string siteCode;
		string marketplace;
	}
	
	@topic("/marketplace/category/find/fail")
	record FailedGetMarketplaceCategoriesMessage {
		string siteCode;
		string marketplace;
		string log;
	}
	
	// Custom categories that a merchant may have configured on a marketplace.
	// For eBay, this would be an eBay Store's custom store categories.
	record GetCustomCategoriesMessage {
		string siteCode;
	}
	record CustomCategoriesMessage {
		array<CustomCategory> categories;
	}
	
	record GetAttributeRecommendationsMessage {
		string siteCode;
		array<Category> categories;
	}
	record AttributeRecommendationsMessage {
		array<AttributeRecommendations> attributeRecommendations;
	}
	
	@topic("/marketplace/authorization/init")
	record InitAuthorizationMessage {
		//Only used if marketplace web-auth flow supports it 
		union{null,string} returnURL;
		union{null,string} cancelURL;
		
		/*
		   This guid is use to correlate between this message and PendingAuthorizationMessage.
		   This can be any string that is unique to the client. It will not be used by
		   the adapter for any purpose except returned as part of the PendingAuthorizationMessage.
		 */
		string guid;
	}
	
	@topic("/marketplace/authorization/init/success")
	record PendingAuthorizationMessage {
		//This guid is use to correlate between this message and InitAuthorizationMessage
		string guid;
		
		string redirectURL;
		string authId; //A unique identifier for the authorization

		/*
		 * Any extra credentials needed to proceed with the auth
		 */
		union{null,Credential} cred;
	}
	
	@topic("/marketplace/authorization/complete")
	record CompleteAuthorizationMessage {
		string authId;
		//any extra credentials needed to complete the process
		union{null,Credential} cred;
	}
	
	@topic("/marketplace/authorization/complete/success")
	record AuthorizationMessage {
		string authId;
		union{null,string} userMarketplaceId;
	}

	@topic("/marketplace/profile/create")
	record CreateMarketplaceProfileMessage {
		MarketplaceProfile p; //xId is empty
	}
	
	@topic("/marketplace/profile/create/success")
	record NewMarketplaceProfileMessage {
		MarketplaceProfile p; //xId is filled in
	}

	@topic("/marketplace/profile/create/fail")
	record FailedCreateMarketplaceProfileMessage {
		MarketplaceProfile p;
		string log;
	}
	
	@topic("/marketplace/profile/find")
	record GetMarketplaceProfileMessage {
		string xProfileId;
	}
	
	@topic("/marketplace/profile/find/success")
	record MarketplaceProfileMessage {
		MarketplaceProfile p;
	}
	
	@topic("/marketplace/profile/find/fail")
	record FailedGetMarketplaceProfileMessage {
		string xProfileId;
		string log;
	}
	
	@topic("/marketplace/profile/update")
	record UpdateMarketplaceProfileMessage {
		MarketplaceProfile p; //xId must be filled in
	}
	
	@topic("/marketplace/profile/update/success")
	record UpdatedMarketplaceProfileMessage {
		MarketplaceProfile p;
	}
	
	@topic("/marketplace/profile/update/fail")
	record FailedUpdateMarketplaceProfileMessage {
		MarketplaceProfile p;
		string log;
	}

	@topic("/marketplace/profile/delete")
	record DeleteMarketplaceProfileMessage {
		string xProfileId;
	}
	
	@topic("/marketplace/profile/delete/success")
	record DeletedMarketplaceProfileMessage {
		string xProfileId;
	}

	@topic("/listing/create")
	record CreateListingMessage {
		array<Listing> listings; //does not have marketListingId yet
		string xProfileId;
	}
	
	@topic("/listing/create/success")
	record NewListingMessage { //Does not map 1:1 with request message
		array<Listing> listings;
		string xProfileId;
	}
	
	@topic("/listing/create/fail")
	record FailedCreateListingMessage {
		array<ListingError> errors;
		string xProfileId;
	}
	
	@topic("/listing/find")
	record GetListingMessage {
		string xProfileId;
		ListingFilter filter;
	}
	
	@topic("/listing/find/success")
	record ListingsMessage {
		array<Listing> listings;
		string xProfileId;
		ListingFilter filter;
	}
	
	@topic("/listing/find/fail")
	record FailedGetListingMessage {
		string xProfileId;
		ListingFilter filter;
		string log;
	}
	
	@topic("/listing/update")
	record UpdateListingMessage {
		array<Listing> updates; //must have marketListingId
		string xProfileId;
	}
	
	@topic("/listing/update/success")
	record UpdatedListingMessage {
		array<Listing> updates;
		string xProfileId;
	}
	
	@topic("/listing/update/fail")
	record FailedUpdateListingMessage {
		array<ListingUpdateError> errors;
		string xProfileId;
	}

	@topic("/listing/cancel")
	record CancelListingMessage {
		array<string> skus;
		string xProfileId;
	}
	
	@topic("/listing/cancel/success")
	record CancelledListingMessage {
		array<string> skus;
		string xProfileId;
	}
	
	@topic("/listing/cancel/fail")
	record FailedCancelListingMessage {
    	array<CancelListingError> errors;
		string xProfileId;
  	}

	@topic("/order/find")
	record GetOrderMessage {
		OrderFilter filter;
		string xProfileId;
	}
	
	@topic("/order/find/success")
	record OrdersMessage {
		array<Order> orders;
		string xProfileId;
		OrderFilter filter;
	}
	
	@topic("/order/find/fail")
	record FailedGetOrderMessage {
		OrderFilter filter;
		string xProfileId;
		string log;
	}
	
	@topic("/order/update")
	record UpdateOrderMessage {
		array<OrderUpdate> updates;
		string xProfileId;
	}
	
	@topic("/order/update/success")
	record UpdatedOrderMessage {
		array<OrderUpdate> updates;
		string xProfileId;
	}
	
	@topic("/order/update/fail")
	record FailedUpdateOrderMessage {
		array<OrderUpdateError> errors;
		string xProfileId;
	}	
}