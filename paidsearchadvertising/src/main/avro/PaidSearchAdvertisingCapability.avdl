@namespace("com.x.paidsearchadvertising.v1")

/**
 * Message definitions for the paid search advertising
 */
protocol PaidSearchAdvertisingCapability 
{
    /*--------------------------------------------------------------------------
     * Types
     */

    /**
     * Advertiser Account
     * TODO:
     */
    record AdvertiserAccount
    {
        union{null, string} id;

        /**
         * 3 character ISO 4217 code
         */
        union{null, string} currencyCode;

        // TODO: Additional data needed to create the account
    }

    /**
     * Status of a campaign that can be set by the user
     */
    enum CampaignUserStatus
    {
        ACTIVE,
        PAUSED,
        DELETED
    }

    /**
     * Status of a campaign that is set by the provider
     */
    enum CampaignProviderStatus
    {
        PENDING,
        SERVING,
        SUSPENDED,
        ENDED,
        DELETED
    }

    /**
     * List of offer ID provided to define offer specific ads
     */
    record OfferListAdExtension
    {
        array<string> offerIds;

        /**
         * List of attributes that identifies information that should be used
         * to create ads
         * TODO: Should this be product attributes?
         */
        array<string> offerAttributeIds;
    }

    /**
     * Information provided with the campaign that is needed to create the ads
     */
    record AdExtension
    {
        string id;

        /**
         * Additional AdExtensions needed can be introduced by adding to the
         * union here
         */
        union {OfferListAdExtension};
    }

    /** This record is used to return error information */
    record Error
    {
        /** Numeric value that indicates the type of error */
        string code;
 
        /**  Key whose value is a human displayable version of this error */
        union {null, string} message = null;
 
        /** 
         * Parameters for the message. Parameter place holders identified 
         * using the format in java.text.MessageFormat. The key of the map is
         * the placeholder string, and the value is the string that replaces it. 
         */
        union {null, map<string>} parameters = null;
    }

    /**
     * Filter identifies the subset of the Campaign that should be retrieved.
     */
    record Filter
    {
    }

    /**
     * Amount
     */
    record Amount
    {
        /**
         * Number of monetary units specified in a currency carried in the currency field
         */
        string value;

        /**
         * 3 character ISO 4217 code
         */
        string currencyCode;
    }

    /**
     * Campaign Ad Extension
     */
    record CampaignAdExtension
    {
        String campaignId;

        /**
         * Additional context information included in the campain and which is
         * needed to create ads
         */
        AdExtension adExtension;

    }

    /**
     * Campaign
     */
    record Campaign
    {
        /**
         * ID of the campaign. Generated by the provider. Ignored if set by user.
         */
        union {null, string} campaignId;

        /**
         * Name of the campaign. Set by the user.
         */
        union {null, string} campaignName;

        /**
         * Effective date of the campaign.
         * Format: ISO 8601 YYYYMMDD
         */
        union {null, string} startDate;

        /**
         * Expiry date of the campaign.
         * Format: ISO 8601 YYYYMMDD
         */
        union {null, string} endDate;

        /**
         * Budget for the campaign
         */
        union {null, Amount} campaignBudget;

        /**
         * Status set by the user. This can be set in the update message
         */
        union {null, CampaignUserStatus} userStatus;

        /**
         * Status set by the provider. This is read only and cannot be set by the
         * user
         */
        union {null, CampaignProviderStatus} providerStatus;
    }

    /**
     * Range of dates
     */
    record DateRange
    {
        /**
         * Start date
         * Format: ISO 8601 YYYYMMDD
         */
        union {null, string} startDate;

        /**
         * End date
         * Format: ISO 8601 YYYYMMDD
         */
        union {null, string} endDate;
    }

    /**
     * Report data
     */
    record ReportData
    {
        /**
         * Table of data: column x row 
         * Columns corresponding to the fields in the Selector
         * Number of rows corresponds to the predicate
         */
        array<array<string>> table;
    }

    /**
     * Operator
     */
    enum Operator
    {
        EQUALS,
        NOT_EQUALS,
        GREATER_THAN,
        GREATER_THAN_EQUALS,
        LESS_THAN,
        LESS_THAN_EQUALS,
    }
    
    /**
     * Predicate
     */
    record Predicate
    {
        string field;

        Operator operator;

        array<string> values;
    }

    /**
     * Sort order
     */
    enum SortOrder
    {
        ASCENDING,
        DESCENDING
    }

    /**
     * Order by
     */
    record OrderBy
    {
        string field;

        SortOrder sortOrder;
    }

    /**
     * Specifies the page of results to return in the response
     */
    record Paging
    {
        int startIndex;
 
        int numberResults;
    }

    /**
     * Query that corresponds to the report
     */
    record Query
    {
        /**
         * Fields to be selected. These will be 'columns' in the report
         */
        array<string> fields;
        
        /**
         * Specifies how an entity should be filtered. Essentially, the WHERE
         * clause
         */
        array<Predicate> predicates;

        /**
         * Range of dates for which the report data should be included
         * TODO: Can this be replaced by the startDate and endDate fields in
         * predicate
         */
        DateRange dateRange;

        /**
         * Fields on which the report should be sorted. The order is significant -
         * first field determines primary sort order, the next determines
         * secondary sort order, etc.
         */
        array<OrderBy> ordering;

        /**
         * Pagination information
         */
        Paging paging;
    }

    /**
     * Type of report. This determines the fields that can be used in the 
     * Selector
     */
    enum ReportType
    {
        CAMPAIGN_PERFORMANCE_REPORT
    }

    /**
     * Report definition
     */
    record ReportDefinition
    {
        /**
         * Locale in which the report should be returned
         * TODO: Format
         */
        union {null, string} locale;

        /**
         * Type of the report
         */
        ReportType reportType;

        /**
         * Query that describes the report
         */
        Query query;
    }

    /**
     * Report
     */
    record Report
    {
        ReportDefinition reportDefinition;
        union {null, ReportData} reportData;
    }

    /*--------------------------------------------------------------------------
     * Messages
     */

    /**
     * Create an Advertiser Account
     * TODO
     */
    @topic("/paidSearchAdvertising/advertiserAccount/create") 
    @version("1.0.0") 
    record CreateAdvertiserAccount
    {
        AdvertiserAccount advertiserAccount;
    }

    /**
     * Successful creation of an Advertiser Account
     * TODO
     */
    @topic("/paidSearchAdvertising/advertiserAccount/created") 
    @version("1.0.0") 
    record AdvertiserAccountCreated
    {
        AdvertiserAccount advertiserAccount;
    }

    /**
     * Advertiser Account creation failed
     * TODO
     */
    @topic("/paidSearchAdvertising/advertiserAccount/createFailed") 
    @version("1.0.0") 
    record CreateAdvertiserAccountFailed
    {
        AdvertiserAccount advertiserAccount;
        array<Error> errors;
    }

    /**
     * Create a campaign
     */
    @topic("/paidSearchAdvertising/campaign/create") 
    @version("1.0.0") 
    record CreateCampaign
    {
        Campaign campaign;
    }

    /**
     * Successful creation of a campaign
     */
    @topic("/paidSearchAdvertising/campaign/created") 
    @version("1.0.0") 
    record CampaignCreated
    {
        Campaign campaign;
    }

    /**
     * Campaign creation failed
     */
    @topic("/paidSearchAdvertising/campaign/createFailed") 
    @version("1.0.0") 
    record CreateCampaignFailed
    {
        Campaign campaign;
        array<Error> errors;
    }

    /**
     * Retrieve a campaign. If a Filter is not provided, the entire Campaign
     * is requested.
     */
    @topic("/paidSearchAdvertising/campaign/get") 
    @version("1.0.0") 
    record GetCampaign
    {
        Campaign campaign;
        union {null, Filter} filter;
    }

    /**
     * Successful retrieval of a campaign
     */
    @topic("/paidSearchAdvertising/campaign/getSucceeded") 
    @version("1.0.0") 
    record GetCampaignSucceeded
    {
        Campaign campaign;
        union {null, Filter} filter;
    }

    /**
     * Campaign retrieval failed
     */
    @topic("/paidSearchAdvertising/campaign/getFailed") 
    @version("1.0.0") 
    record GetCampaignFailed
    {
        Campaign campaign;
        union {null, Filter} filter;
        array<Error> errors;
    }

    @topic("/paidSearchAdvertising/campaign/update") 
    @version("1.0.0") 
    record UpdateCampaign
    {
        Campaign campaign;
    }

    @topic("/paidSearchAdvertising/campaign/updated") 
    @version("1.0.0") 
    record CampaignUpdated
    {
        Campaign campaign;
    }

    @topic("/paidSearchAdvertising/campaign/updateFailed") 
    @version("1.0.0") 
    record UpdateCampaignFailed
    {
        Campaign campaign;
        array<Error> errors;
    }

    @topic("/paidSearchAdvertising/campaign/delete") 
    @version("1.0.0") 
    record DeleteCampaign
    {
        Campaign campaign;
    }

    @topic("/paidSearchAdvertising/campaign/deleted") 
    @version("1.0.0") 
    record CampaignDeleted
    {
        Campaign campaign;
    }

    @topic("/paidSearchAdvertising/campaign/deleteFailed") 
    @version("1.0.0") 
    record DeleteCampaignFailed
    {
        Campaign campaign;
        array<Error> errors;
    }

    // Add Campaign Ad Extension messages

    @topic("/paidSearchAdvertising/campaignAdExtension/add") 
    @version("1.0.0") 
    record AddCampaignAdExtension
    {
        CampaignAdExtension campaignAdExtension;
    }

    @topic("/paidSearchAdvertising/campaignAdExtension/added") 
    @version("1.0.0") 
    record CampaignAdExtensionAdded
    {
        CampaignAdExtension campaignAdExtension;
    }

    @topic("/paidSearchAdvertising/campaignAdExtension/addFailed") 
    @version("1.0.0") 
    record AddCampaignAdExtensionFailed
    {
        CampaignAdExtension campaignAdExtension;
        array<Error> errors;
    }

    // Delete Campaign Ad Extension messages

    @topic("/paidSearchAdvertising/campaignAdExtension/delete") 
    @version("1.0.0") 
    record DeleteCampaignAdExtension
    {
        CampaignAdExtension campaignAdExtension;
    }

    @topic("/paidSearchAdvertising/campaignAdExtension/deleted") 
    @version("1.0.0") 
    record CampaignAdExtensionDeleted
    {
        CampaignAdExtension campaignAdExtension;
    }

    @topic("/paidSearchAdvertising/campaignAdExtension/deleteFailed") 
    @version("1.0.0") 
    record DeleteCampaignAdExtensionFailed
    {
        CampaignAdExtension campaignAdExtension;
        array<Error> errors;
    }

    @topic("/paidSearchAdvertising/report/get") 
    @version("1.0.0") 
    record GetReport
    {
        ReportDefinition reportDefinition;
    }

    @topic("/paidSearchAdvertising/report/getSucceeded") 
    @version("1.0.0") 
    record GetReportSucceeded
    {
        Report report;
    }

    @topic("/paidSearchAdvertising/report/getFailed") 
    @version("1.0.0") 
    record GetReportFailed
    {
        ReportDefinition reportDefinition;
        array<Error> errors;
    }

}
