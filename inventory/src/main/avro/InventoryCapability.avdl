@namespace("com.x.inventory.v1")
 
protocol InventoryCapability 
{
 

    /** This record is used to return error information */
    record Error
    {
        /** Numeric value that indicates the type of error */
        string code;
 
        /**  Key whose value is a human displayable version of this error */
        union {null, string} message = null;
 
        /** 
         * Parameters for the message. Parameter place holders identified 
         * using the format in java.text.MessageFormat. The key of the map is
         * the placeholder string, and the value is the string that replaces it. 
         */
        union {null, map<string>} parameters = null;
    }

    /**
     * Range of dates
     */
    record DateRange
    {
        /**
         * Start date
         * Format: ISO 8601 YYYYMMDD
         */
        union {null, string} startDate;

        /**
         * End date
         * Format: ISO 8601 YYYYMMDD
         */
        union {null, string} endDate;
    }

    /**
     * Operator
     */
    enum Operator
    {
        EQUALS,
        NOT_EQUALS,
        GREATER_THAN,
        GREATER_THAN_EQUALS,
        LESS_THAN,
        LESS_THAN_EQUALS
    }
    
    /**
     * Predicate
     */
    record Predicate
    {
        /** 
         * The field by which to filter the returned data. The filterable
         * fields for an entity are specified in the documentation.
         */
        string field;

        Operator operator;

        /**
         * Must only contain single value. Support for multiple values defined
         * for any future operations that may need it.
         */
        array<string> values;
    }

    /**
     * Sort order
     */
    enum SortOrder
    {
        ASCENDING,
        DESCENDING
    }

    /**
     * Order by
     */
    record OrderBy
    {
        string field;

        SortOrder sortOrder;
    }

    /**
     * Specifies the page of results to return in the response
     */
    record Paging
    {
        int startIndex;
 
        int numberResults;
    }

    /**
     * Query that corresponds to the report
     */
    record Query
    {
        /**
         * Fields whose values need to be returned in the results.  These 
         * will be 'columns' in the report
         */
        array<string> fields;
        
        /**
         * Specifies how an entity should be filtered. Essentially, the WHERE
         * clause. This cannot be empty.
         * Multiple Predicate elements are combined using AND logic.
         */
        array<Predicate> predicates;

        /**
         * Range of dates for which the report data should be included
         * TODO: Can this be replaced by the startDate and endDate fields in
         * predicate
         */
        DateRange dateRange;

        /**
         * Fields on which the report should be sorted. The order is significant -
         * first field determines primary sort order, the next determines
         * secondary sort order, etc.
         */
        array<OrderBy> ordering;

        /**
         * Pagination information
         */
        Paging paging;
    }

    /**
     * Query Result
     * The result of a query can be null, in which case the Error structure
     * will indicate the error.
     * In the successful case, the result is zero or more rows, each containing
     * one or more columns. The order of the columns would correspond to the
     * order of the fields in the Query record.
     * While the type of column supported is a string now, this can be enhanced
     * by adding additional types to the inner union.
     */
    record QueryResult
    {
        union {null, array<array<union{string}>>} data;
    }

    // TODO: Model location
    record Location
    {
	string name;
	string code;
    }

    record StockItem 
    {
        string skuId;
        int quantity;  // note: quantity is a high consistency field due to serialization issues.
        union {null, Location} location;
    }

    enum Filter 
    {
    }

    record InventoryError
    {
	union {null, StockItem} stockItem;
	array<Error> errors;
    }

    record LocationError
    {
	union {null, Location} Locations;
	array<Error> errors;
    }
 
    /*-------------------------------------------------------------------*/
    /* Message definitions                                               */
    /*-------------------------------------------------------------------*/
    @topic("/inventory/stockItem/set")
    @version("1.0.0")
    record SetStockItem
    {
        array<StockItem> stockItems;
    }
 
    @topic("/inventory/stockItem/setSucceeded")
    @version("1.0.0")
    record SetStockItemSucceeded
    {
        array<StockItem> stockItems;
    }
 
    @topic("/inventory/stockItem/setFailed")
    @version("1.0.0")
    record SetStockItemFailed
    {
        array<InventoryError> createErrors;
    }

    @topic("/inventory/stockItem/get")
    @version("1.0.0")
    record GetStockItem
    {
        array<string> stockItemIds;
        union {null, Filter} filter; 
    }
 
    @topic("/inventory/stockItem/getSucceeded")
    @version("1.0.0")
    record GetStockItemSucceeded
    {
        array<StockItem> stockItems;
        union {null, Filter} filter; 
    }
 
    @topic("/inventory/stockItem/getFailed")

    @version("1.0.0")
    record GetStockItemFailed
    {
        union {null, Filter} filter; 
        array<InventoryError> getErrors;
    }
 
    // TODO: Use Query pattern
    @topic("/inventory/stockItem/search")
    @version("1.0.0")
    record SearchStockItem
    {
        Query query;
    }
 
    @topic("/inventory/stockItem/searchSucceeded")
    @version("1.0.0")
    record SearchStockItemSucceeded
    {
        Query query;
        QueryResult queryResult;
    }
 
    @topic("/inventory/stockItem/searchFailed")
    @version("1.0.0")
    record SearchStockItemFailed
    {
        Query query;
        array<Error> errors;
    }

    //Note: this update command will update all fields of the StockItem including the quantity field.
    //Use the updateQuantity message to update that field if you wish to perform relative value updates.
    @topic("/inventory/stockItem/update")
    @version("1.0.0")
    record UpdateStockItem
    {
        array<StockItem> stockItems;
    }
 
    @topic("/inventory/stockItem/updated")
    @version("1.0.0")
    record StockItemUpdated
    {
        array<StockItem> stockItems;
    }
 
    @topic("/inventory/stockItem/updateFailed")
    @version("1.0.0")
    record UpdateStockItemFailed
    {
        array<InventoryError> updateErrors;
    }

    //This is a relative assignment (+3 or -1), not an absolute assignment of quantity.
    //If you want an absolute assignment, first do a get, compute the delta from that
    //amount to your target amount and send an updateQuantity message with that delta.
    //Then listen for the quantityUpdated response (and compare that quantity to your 
    //desired absolute amount).
    @topic("/inventory/stockItem/updateQuantity")
    @version("1.0.0")
    record UpdateQuantity
    {
        string skuId;
        Location location;
	int quantity;
    }

    @topic("/inventory/stockItem/quantityUpdated")
    @version("1.0.0")
    record QuantityUpdated
    {
        StockItem stockItem;
    }
 
    @topic("/inventory/stockItem/updateQuantityFailed")
    @version("1.0.0")
    record UpdateQuantityFailed
    {
        Error quantityUpdateError;
    }
 
    @topic("/inventory/stockItem/delete")
    @version("1.0.0")
    record DeleteStockItem
    {
        array<StockItem> stockItems;
    }
 
    @topic("/inventory/stockItem/deleted")
    @version("1.0.0")
    record StockItemDeleted
    {
        array<StockItem> stockItems;
    }
 
    @topic("/inventory/stockItem/deleteFailed")
    @version("1.0.0")
    record DeleteStockItemFailed
    {
        array<InventoryError> deleteErrors;
    }

    @topic("/inventory/stockItem/outOfStock")
    @version("1.0.0")
    record OutOfStock
    {
        StockItem stockItem;
    }

    @topic("/inventory/location/create")
    @version("1.0.0")
    record CreateLocation
    {
        array<Location> locations;
    }   

    @topic("/inventory/location/created")
    @version("1.0.0")
    record LocationCreated
    {
        array<Location> locations;
    }

    @topic("/inventory/location/createFailed")
    @version("1.0.0")
    record CreateLocationFailed
    {
        array<LocationError> locationErrors;
    }

    @topic("/inventory/location/update")
    @version("1.0.0")
    record UpdateLocation
    {
        array<Location> locations;
    }

    @topic("/inventory/location/updated")
    @version("1.0.0")
    record LocationUpdated
    {
        array<Location> locations;
    }

    @topic("/inventory/location/updateFailed")
    @version("1.0.0")
    record UpdateLocationFailed
    {
        array<LocationError> updateErrors;
    }

    @topic("/inventory/location/get")
    @version("1.0.0")
    record GetLocation
    {
    }   

    @topic("/inventory/location/getSucceeded")
    @version("1.0.0")
    record GetLocationSucceeded
    {
        union {null, array<Location>} locations;
    }

    @topic("/inventory/location/deactivate")
    @version("1.0.0")
    record DeactivateLocation
    {
        array<Location> locations;
    }

    @topic("/inventory/location/deactivated")
    @version("1.0.0")
    record LocationDeactivated
    {
        array<Location> locations;
    }

    @topic("/inventory/location/deactivateFailed")
    @version("1.0.0")
    record DeactivateLocationFailed
    {
        array<LocationError> deactivateErrors;
    }

}
