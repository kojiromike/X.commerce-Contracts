@namespace("com.x.service.order")
protocol OrderService {

  enum OrderLineItemType {
    PHYSICAL_GOODS,
    DIGITAL_GOODS,
    SERVICES
  }
      
  record OrderLineItem {
	string lineItemId;
	string itemId;
  	string sku;
  	string description;
  	double unitPrice; //can we use double for price???
  	int quantity;
	double totalTax;
	double totalShipping;
	double totalInsurance;
	double totolCost;
	string saleRecordId;
	string currencyCode;
	string listingSiteId;
  	OrderLineItemType itemType;
  }

  record Order {
       string orderId;
	 string customerId;
	 string firstName;
	 string lastName;
	 string email;
	 string phone;
	 string shippingService;
	 string checkoutSiteId;
	 string currencyCode;
	 string orderCreateTime;
	string orderUpdateTime;
	 string  status;
	 double insurance;
  	 array<OrderLineItem> lineItems;
  	 double itemsPrice;
  	 double totalShipping;
  	 double totalTax;
  }
  
  enum OrderLineItemFulfillmentStatus {
    SHIPMENT_PENDING,
    SHIPPED,
    PROCESSING //processing in warehouse
  }
  enum OrderLineItemPaymentStatus {
    PENDING,
    BILLED,
    AUTHORIZED,
    CAPTURED,
    REJECTED
  }
  enum OrderLineItemOrderStatus {
    BACKORDERED,
    CANCELLED,
    RETURNED
  }

  record OrderLineItemDetails {
    OrderLineItem lineItem;
    OrderLineItemOrderStatus orderStatus;
    OrderLineItemPaymentStatus paymentStatus;
    OrderLineItemFulfillmentStatus fulfillmentStatus;
  }
  
  enum OrderStatus {
    CANCELLED,
    COMPLETED
  }
  record OrderDetails {
  	array<OrderLineItemDetails> lineItemDetails;
  }
  
  record OrderUpdate {
  	  Order existingOrder;
  }

record SingleQuery {
string field;
string operation;
string operand1;
union{ null,string } operand2;
}  

  record FindCriteria {
  	array<SingleQuery> criteria;
  }
  
  record MessageEnvelope {
    string responseTopic;
  	string uniqueId;
  }

  record CreateOrderRequest {
  	Order order;
  }

  record CreateOrderResponse {
  	string orderId;
  }
  
  record UpdateOrderResponse {
  	string orderId;
  }

  record UpdateOrderRequest {
    Order existingOrder; 	
  }

  record FindOrdersRequest {
  	FindCriteria criteria;
  }
  
  record FindOrdersResponse {
  	array<Order> orders;
  }

  record DeleteOrderRequest {
  	array<string> orderIds;
  }
  
  record DeleteOrderResponse {
  	int deleted;
  	array<boolean> success;
  }

  error OrderServiceError {
    int errorCode;
    string message;
  }
  
  CreateOrderResponse createOrder(CreateOrderRequest request) throws OrderServiceError; //return confirmation id
  FindOrdersResponse findOrders(FindOrdersRequest request) throws OrderServiceError;
  UpdateOrderResponse updateOrder(UpdateOrderRequest request ) throws OrderServiceError;
  DeleteOrderResponse deleteOrder(DeleteOrderRequest request) throws OrderServiceError; 
}