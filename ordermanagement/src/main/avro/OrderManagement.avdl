@namespace("com.x.ordermanagement.v0")

/**
	The order management protocol defines the schema for all
	the messages that are part of the order management domain.
*/
protocol OrderManagement {
	import idl "CurrencyAmount.avdl";
	import idl "Name.avdl";
	import idl "Address.avdl";
	import idl "Contact.avdl";
	
	record Customer {
		string id;
		com.x.ocl.Name name;
		string emailAddress;
	}

	record Billing {
		com.x.ocl.Contact billingContact;
		string companyName;
	}

	record DateRange {
		long fromDate;
		long toDate;
	}

	record GiftTag {
   		string From;
   		string To;
   		string message;
	}

	@topic("/order/payment/captured")
	record PaymentTransaction {
		string paymentType;
		string paymentTypeId;
		string paymentReferenceNumber;
		long transactionDate;
		string transactionStatus;
	}
	
	record PromotionalDiscount {
		string id;
		string code;
		string description;
		com.x.ocl.CurrencyAmount amount;
	}

	enum ShippingServiceType {
		MerchantShipped,
		DropShipped,
		ShippingService
	}

	record Shipping {
		ShippingServiceType serviceType;
		string serviceProviderId;
		string shippingMethod;
		DateRange deliveryWindow;
		DateRange shippingWindow;
		string message;
		array<PromotionalDiscount> discounts;
		com.x.ocl.CurrencyAmount fee;
		string trackingNumber;
	}

	enum TaxabilityType {
		Taxable,
		NonTaxable,
		Exempt,
		Deferred
	}

	@topic("/order/tax/calculated")
	record Tax {
		TaxabilityType taxability;
		string taxType;
		com.x.ocl.CurrencyAmount taxableAmount;
		com.x.ocl.CurrencyAmount calculatedTax;
		double effectiveRate;
	}

	record OrderItemPrice {
		com.x.ocl.CurrencyAmount amount;
		com.x.ocl.CurrencyAmount originalAmount;
		array<PromotionalDiscount> discounts;
	}

	enum OrderStatus {
		New,
		OnHold,
		Backordered,
		ReadyToShip,
		Shipped,
		ProcessingReturn,
		Exchanged,
		Canceled
	}

	record ProductAttribute {
		string label;
		string value;
	}

	record OrderShippingStatus {
		string OrderId;
		string Status;
	}

	record OrderItem {
		string ItemId;
		string ExternalItemId;
		string productSku;
		string description;
		array<ProductAttribute> productAttributes;	
		int quantity;
		OrderItemPrice unitPrice;
		Tax tax;
		GiftTag giftTag;
		com.x.ocl.Contact destination;
		Shipping shipping;
		string message;
	}

	@topic("/order/create, /order/created, /order/update, /order/updated, /order/shipped")
	record Order {
   		string orderNumber;
   		string externalOrderNumber;
    	long dateOrdered;
    	string source;
    	string sourceId;
    	OrderStatus status;
		Customer customer;
		Billing billTo;
		string purchaseOrder;
		array<OrderItem> orderItems;
		Tax tax;
		PaymentTransaction transaction;
	}

	@topic("/order/searchSucceeded")
	record Orders {
		array<Order> orders;
	}

	@topic("/order/cancel")
	record OrderCancel {
		array<string> orderIds;
	}

	@topic("/order/search")
	record OrderFilter {
		string filter;
	}

	@topic ("/order/inventoryUpdated")
	record OrderInventoryChanged {
		string productId;
		int change;
	}

	record OrderSearchFilter {
		string customerId;
		string orderId;
	}
}



