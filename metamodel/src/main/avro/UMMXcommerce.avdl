@namespace("com.x.ocl.umm")
protocol Xcommerce {

	enum PrimitiveTypeEnum {
		BOOLEAN,
		STRING,
		INTEGER,
		LONG,
		FLOAT,
		DOUBLE,
		BYTES,
		ENUM,
		FIXED
	}
	
	enum CollectionTypeEnum {
		ARRAY,
		MAP
	}	

	@abstract("true")
	record PropertyType {
		string name;
	}
	
	@extends("com.x.ocl.umm.PropertyType")
	record PrimitiveType {
		PrimitiveTypeEnum type;
	}

	@extends("com.x.ocl.umm.PropertyType")
	record ComplexType {
		/** Key=member name, value=member's PropertyType.name */
		map<string> members;
	}
	
	@extends("com.x.ocl.umm.PropertyType")
	record CollectionType {
		CollectionTypeEnum type;
		string memberTypeName;
	}

	@extends("com.x.ocl.umm.PropertyType")
	record UnionType {
		array<string> unionMembers; //PropertyType.names
	}
	
	@extends("com.x.ocl.umm.PropertyType")
	record EnumType {
		/** Key=enum literal name, value=enum literal value */
		map<string> values;
	}

	record MessageProperty {
		string name;
		string propertyTypeName;
		boolean isRequired = true;
	}
	
	record Message {
		string fullName; //Fully qualified name of the message
		
		array<MessageProperty> properties;
	}
	
	/** A specialized message used for message acknowledgment. */
	@abstract("true")
	record AckMessage {
		string correlationId;
	}
	
	@extends("com.x.ocl.umm.AckMessage")
	record ReceiptAckMessage {
		AckMessage _base;
	}

	@extends("com.x.ocl.umm.AckMessage")
	record ProcessingAckMessage {
		AckMessage _base;
	}

	record Topic {
		string name; 
		/** 
		 * The possible DEFAULT messages sent to this topic.
		 * key = Fully qualified message name
		 */
		map<union{Message,ReceiptAckMessage,ProcessingAckMessage}> allowedMessages;
	}
}