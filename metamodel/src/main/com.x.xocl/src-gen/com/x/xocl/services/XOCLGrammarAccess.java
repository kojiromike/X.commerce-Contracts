/*
* generated by Xtext
*/

package com.x.xocl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XOCLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Domainmodel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTopLevelElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Domainmodel:
		//	elements+=TopLevelElement*;
		public ParserRule getRule() { return rule; }

		//elements+=TopLevelElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//TopLevelElement
		public RuleCall getElementsTopLevelElementParserRuleCall_0() { return cElementsTopLevelElementParserRuleCall_0; }
	}

	public class TopLevelElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopLevelElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPackageParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TopLevelElement:
		//	Import | Package;
		public ParserRule getRule() { return rule; }

		//Import | Package
		public Alternatives getAlternatives() { return cAlternatives; }

		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }

		//Package
		public RuleCall getPackageParserRuleCall_1() { return cPackageParserRuleCall_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackageQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" package=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" package=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//package=QualifiedNameWithWildcard
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getPackageQualifiedNameWithWildcardParserRuleCall_1_0() { return cPackageQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	PackageName ".*"?;
		public ParserRule getRule() { return rule; }

		//PackageName ".*"?
		public Group getGroup() { return cGroup; }

		//PackageName
		public RuleCall getPackageNameParserRuleCall_0() { return cPackageNameParserRuleCall_0; }

		//".*"?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class PackageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageName");
		private final RuleCall cQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//PackageName:
		//	QualifiedName;
		public ParserRule getRule() { return rule; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall() { return cQualifiedNameParserRuleCall; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNamePackageNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionVersionStringParserRuleCall_2_0 = (RuleCall)cVersionAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cElementsPackageElementParserRuleCall_4_0 = (RuleCall)cElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Package:
		//	"package" name=PackageName version=VersionString? "{" elements+=PackageElement+ "}";
		public ParserRule getRule() { return rule; }

		//"package" name=PackageName version=VersionString? "{" elements+=PackageElement+ "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=PackageName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//PackageName
		public RuleCall getNamePackageNameParserRuleCall_1_0() { return cNamePackageNameParserRuleCall_1_0; }

		//version=VersionString?
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }

		//VersionString
		public RuleCall getVersionVersionStringParserRuleCall_2_0() { return cVersionVersionStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//elements+=PackageElement+
		public Assignment getElementsAssignment_4() { return cElementsAssignment_4; }

		//PackageElement
		public RuleCall getElementsPackageElementParserRuleCall_4_0() { return cElementsPackageElementParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class VersionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTwoPartVersionStringParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFourPartVersionStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VersionString:
		//	TwoPartVersionString | FourPartVersionString;
		public ParserRule getRule() { return rule; }

		//TwoPartVersionString | FourPartVersionString
		public Alternatives getAlternatives() { return cAlternatives; }

		//TwoPartVersionString
		public RuleCall getTwoPartVersionStringParserRuleCall_0() { return cTwoPartVersionStringParserRuleCall_0; }

		//FourPartVersionString
		public RuleCall getFourPartVersionStringParserRuleCall_1() { return cFourPartVersionStringParserRuleCall_1; }
	}

	public class TwoPartVersionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoPartVersionString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMajorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMajorINTTerminalRuleCall_0_0 = (RuleCall)cMajorAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMinorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMinorINTTerminalRuleCall_2_0 = (RuleCall)cMinorAssignment_2.eContents().get(0);
		
		//TwoPartVersionString:
		//	major=INT "." minor=INT;
		public ParserRule getRule() { return rule; }

		//major=INT "." minor=INT
		public Group getGroup() { return cGroup; }

		//major=INT
		public Assignment getMajorAssignment_0() { return cMajorAssignment_0; }

		//INT
		public RuleCall getMajorINTTerminalRuleCall_0_0() { return cMajorINTTerminalRuleCall_0_0; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//minor=INT
		public Assignment getMinorAssignment_2() { return cMinorAssignment_2; }

		//INT
		public RuleCall getMinorINTTerminalRuleCall_2_0() { return cMinorINTTerminalRuleCall_2_0; }
	}

	public class FourPartVersionStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FourPartVersionString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTwoPartVersionStringParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cReleaseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReleaseFullStopKeyword_1_0 = (Keyword)cReleaseAssignment_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBuildAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cBuildFullStopKeyword_3_0 = (Keyword)cBuildAssignment_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//FourPartVersionString:
		//	TwoPartVersionString release="." INT build="." INT;
		public ParserRule getRule() { return rule; }

		//TwoPartVersionString release="." INT build="." INT
		public Group getGroup() { return cGroup; }

		//TwoPartVersionString
		public RuleCall getTwoPartVersionStringParserRuleCall_0() { return cTwoPartVersionStringParserRuleCall_0; }

		//release="."
		public Assignment getReleaseAssignment_1() { return cReleaseAssignment_1; }

		//"."
		public Keyword getReleaseFullStopKeyword_1_0() { return cReleaseFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }

		//build="."
		public Assignment getBuildAssignment_3() { return cBuildAssignment_3; }

		//"."
		public Keyword getBuildFullStopKeyword_3_0() { return cBuildFullStopKeyword_3_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
	}

	public class PackageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPartnerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEntityParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWorkflowParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTransactionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProtocolParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//PackageElement:
		//	Partner | Process | Entity | Workflow | Transaction | Protocol;
		public ParserRule getRule() { return rule; }

		//Partner | Process | Entity | Workflow | Transaction | Protocol
		public Alternatives getAlternatives() { return cAlternatives; }

		//Partner
		public RuleCall getPartnerParserRuleCall_0() { return cPartnerParserRuleCall_0; }

		//Process
		public RuleCall getProcessParserRuleCall_1() { return cProcessParserRuleCall_1; }

		//Entity
		public RuleCall getEntityParserRuleCall_2() { return cEntityParserRuleCall_2; }

		//Workflow
		public RuleCall getWorkflowParserRuleCall_3() { return cWorkflowParserRuleCall_3; }

		//Transaction
		public RuleCall getTransactionParserRuleCall_4() { return cTransactionParserRuleCall_4; }

		//Protocol
		public RuleCall getProtocolParserRuleCall_5() { return cProtocolParserRuleCall_5; }
	}

	public class PartnerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Partner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartnerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cResponsibilitiesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResponsibilitiesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cResponsibilitiesProcessRoleCrossReference_5_0 = (CrossReference)cResponsibilitiesAssignment_5.eContents().get(0);
		private final RuleCall cResponsibilitiesProcessRoleQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cResponsibilitiesProcessRoleCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cResponsibilitiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cResponsibilitiesProcessRoleCrossReference_6_1_0 = (CrossReference)cResponsibilitiesAssignment_6_1.eContents().get(0);
		private final RuleCall cResponsibilitiesProcessRoleQualifiedNameParserRuleCall_6_1_0_1 = (RuleCall)cResponsibilitiesProcessRoleCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Partner:
		//	"partner" name=ID "{" "responsibilities" "(" responsibilities+=[ProcessRole|QualifiedName] (","
		//	responsibilities+=[ProcessRole|QualifiedName])* ")" "}";
		public ParserRule getRule() { return rule; }

		//"partner" name=ID "{" "responsibilities" "(" responsibilities+=[ProcessRole|QualifiedName] (","
		//responsibilities+=[ProcessRole|QualifiedName])* ")" "}"
		public Group getGroup() { return cGroup; }

		//"partner"
		public Keyword getPartnerKeyword_0() { return cPartnerKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"responsibilities"
		public Keyword getResponsibilitiesKeyword_3() { return cResponsibilitiesKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//responsibilities+=[ProcessRole|QualifiedName]
		public Assignment getResponsibilitiesAssignment_5() { return cResponsibilitiesAssignment_5; }

		//[ProcessRole|QualifiedName]
		public CrossReference getResponsibilitiesProcessRoleCrossReference_5_0() { return cResponsibilitiesProcessRoleCrossReference_5_0; }

		//QualifiedName
		public RuleCall getResponsibilitiesProcessRoleQualifiedNameParserRuleCall_5_0_1() { return cResponsibilitiesProcessRoleQualifiedNameParserRuleCall_5_0_1; }

		//("," responsibilities+=[ProcessRole|QualifiedName])*
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//responsibilities+=[ProcessRole|QualifiedName]
		public Assignment getResponsibilitiesAssignment_6_1() { return cResponsibilitiesAssignment_6_1; }

		//[ProcessRole|QualifiedName]
		public CrossReference getResponsibilitiesProcessRoleCrossReference_6_1_0() { return cResponsibilitiesProcessRoleCrossReference_6_1_0; }

		//QualifiedName
		public RuleCall getResponsibilitiesProcessRoleQualifiedNameParserRuleCall_6_1_0_1() { return cResponsibilitiesProcessRoleQualifiedNameParserRuleCall_6_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRolesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRolesProcessRoleParserRuleCall_3_0 = (RuleCall)cRolesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRolesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRolesProcessRoleParserRuleCall_4_1_0 = (RuleCall)cRolesAssignment_4_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cDescriptionKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDescriptionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_0 = (RuleCall)cDescriptionAssignment_8.eContents().get(0);
		private final Assignment cPreconditionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPreconditionsPreconditionsParserRuleCall_9_0 = (RuleCall)cPreconditionsAssignment_9.eContents().get(0);
		private final Assignment cPostconditionsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cPostconditionsPostconditionsParserRuleCall_10_0 = (RuleCall)cPostconditionsAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Process:
		//	"process" name=ID "(" roles+=ProcessRole ("," roles+=ProcessRole)+ ")" "{" "description" description=STRING
		//	preconditions=Preconditions? postconditions=Postconditions? "}";
		public ParserRule getRule() { return rule; }

		//"process" name=ID "(" roles+=ProcessRole ("," roles+=ProcessRole)+ ")" "{" "description" description=STRING
		//preconditions=Preconditions? postconditions=Postconditions? "}"
		public Group getGroup() { return cGroup; }

		//"process"
		public Keyword getProcessKeyword_0() { return cProcessKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//roles+=ProcessRole
		public Assignment getRolesAssignment_3() { return cRolesAssignment_3; }

		//ProcessRole
		public RuleCall getRolesProcessRoleParserRuleCall_3_0() { return cRolesProcessRoleParserRuleCall_3_0; }

		//("," roles+=ProcessRole)+
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//roles+=ProcessRole
		public Assignment getRolesAssignment_4_1() { return cRolesAssignment_4_1; }

		//ProcessRole
		public RuleCall getRolesProcessRoleParserRuleCall_4_1_0() { return cRolesProcessRoleParserRuleCall_4_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//"description"
		public Keyword getDescriptionKeyword_7() { return cDescriptionKeyword_7; }

		//description=STRING
		public Assignment getDescriptionAssignment_8() { return cDescriptionAssignment_8; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_0() { return cDescriptionSTRINGTerminalRuleCall_8_0; }

		//preconditions=Preconditions?
		public Assignment getPreconditionsAssignment_9() { return cPreconditionsAssignment_9; }

		//Preconditions
		public RuleCall getPreconditionsPreconditionsParserRuleCall_9_0() { return cPreconditionsPreconditionsParserRuleCall_9_0; }

		//postconditions=Postconditions?
		public Assignment getPostconditionsAssignment_10() { return cPostconditionsAssignment_10; }

		//Postconditions
		public RuleCall getPostconditionsPostconditionsParserRuleCall_10_0() { return cPostconditionsPostconditionsParserRuleCall_10_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class ProcessRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessRole");
		private final RuleCall cRoleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ProcessRole:
		//	Role;
		public ParserRule getRule() { return rule; }

		//Role
		public RuleCall getRoleParserRuleCall() { return cRoleParserRuleCall; }
	}

	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Role");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Role:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class PreconditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Preconditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPreconditionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cConditionsEntityStateCrossReference_2_0 = (CrossReference)cConditionsAssignment_2.eContents().get(0);
		private final RuleCall cConditionsEntityStateQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cConditionsEntityStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cConditionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cConditionsEntityStateCrossReference_3_1_0 = (CrossReference)cConditionsAssignment_3_1.eContents().get(0);
		private final RuleCall cConditionsEntityStateQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cConditionsEntityStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Preconditions:
		//	"preconditions" "(" conditions+=[EntityState|QualifiedName] ("," conditions+=[EntityState|QualifiedName])* ")";
		public ParserRule getRule() { return rule; }

		//"preconditions" "(" conditions+=[EntityState|QualifiedName] ("," conditions+=[EntityState|QualifiedName])* ")"
		public Group getGroup() { return cGroup; }

		//"preconditions"
		public Keyword getPreconditionsKeyword_0() { return cPreconditionsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//conditions+=[EntityState|QualifiedName]
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }

		//[EntityState|QualifiedName]
		public CrossReference getConditionsEntityStateCrossReference_2_0() { return cConditionsEntityStateCrossReference_2_0; }

		//QualifiedName
		public RuleCall getConditionsEntityStateQualifiedNameParserRuleCall_2_0_1() { return cConditionsEntityStateQualifiedNameParserRuleCall_2_0_1; }

		//("," conditions+=[EntityState|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//conditions+=[EntityState|QualifiedName]
		public Assignment getConditionsAssignment_3_1() { return cConditionsAssignment_3_1; }

		//[EntityState|QualifiedName]
		public CrossReference getConditionsEntityStateCrossReference_3_1_0() { return cConditionsEntityStateCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getConditionsEntityStateQualifiedNameParserRuleCall_3_1_0_1() { return cConditionsEntityStateQualifiedNameParserRuleCall_3_1_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatesEntityStateParserRuleCall_3_0 = (RuleCall)cStatesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Entity:
		//	"entity" name=ID "{" states+=EntityState+ "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ID "{" states+=EntityState+ "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//states+=EntityState+
		public Assignment getStatesAssignment_3() { return cStatesAssignment_3; }

		//EntityState
		public RuleCall getStatesEntityStateParserRuleCall_3_0() { return cStatesEntityStateParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EntityStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTransitionsEntityStateTransitionParserRuleCall_2_1_0 = (RuleCall)cTransitionsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cTransitionsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cTransitionsEntityStateTransitionParserRuleCall_2_2_1_0 = (RuleCall)cTransitionsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//EntityState:
		//	"state" name=ID ("[" transitions+=EntityStateTransition ("," transitions+=EntityStateTransition)* "]")?;
		public ParserRule getRule() { return rule; }

		//"state" name=ID ("[" transitions+=EntityStateTransition ("," transitions+=EntityStateTransition)* "]")?
		public Group getGroup() { return cGroup; }

		//"state"
		public Keyword getStateKeyword_0() { return cStateKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("[" transitions+=EntityStateTransition ("," transitions+=EntityStateTransition)* "]")?
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//transitions+=EntityStateTransition
		public Assignment getTransitionsAssignment_2_1() { return cTransitionsAssignment_2_1; }

		//EntityStateTransition
		public RuleCall getTransitionsEntityStateTransitionParserRuleCall_2_1_0() { return cTransitionsEntityStateTransitionParserRuleCall_2_1_0; }

		//("," transitions+=EntityStateTransition)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//transitions+=EntityStateTransition
		public Assignment getTransitionsAssignment_2_2_1() { return cTransitionsAssignment_2_2_1; }

		//EntityStateTransition
		public RuleCall getTransitionsEntityStateTransitionParserRuleCall_2_2_1_0() { return cTransitionsEntityStateTransitionParserRuleCall_2_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_3() { return cRightSquareBracketKeyword_2_3; }
	}

	public class EntityStateTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EntityStateTransition");
		private final Assignment cSuccessorAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cSuccessorEntityStateCrossReference_0 = (CrossReference)cSuccessorAssignment.eContents().get(0);
		private final RuleCall cSuccessorEntityStateIDTerminalRuleCall_0_1 = (RuleCall)cSuccessorEntityStateCrossReference_0.eContents().get(1);
		
		//EntityStateTransition:
		//	successor=[EntityState];
		public ParserRule getRule() { return rule; }

		//successor=[EntityState]
		public Assignment getSuccessorAssignment() { return cSuccessorAssignment; }

		//[EntityState]
		public CrossReference getSuccessorEntityStateCrossReference_0() { return cSuccessorEntityStateCrossReference_0; }

		//ID
		public RuleCall getSuccessorEntityStateIDTerminalRuleCall_0_1() { return cSuccessorEntityStateIDTerminalRuleCall_0_1; }
	}

	public class PostconditionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Postconditions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPostconditionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPostconditionsAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSuccessAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSuccessOnProcessSuccessParserRuleCall_3_0 = (RuleCall)cSuccessAssignment_3.eContents().get(0);
		private final Assignment cFailureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFailureOnProcessFailureParserRuleCall_4_0 = (RuleCall)cFailureAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Postconditions:
		//	"postconditions" {Postconditions} "{" success=OnProcessSuccess? failure=OnProcessFailure? "}";
		public ParserRule getRule() { return rule; }

		//"postconditions" {Postconditions} "{" success=OnProcessSuccess? failure=OnProcessFailure? "}"
		public Group getGroup() { return cGroup; }

		//"postconditions"
		public Keyword getPostconditionsKeyword_0() { return cPostconditionsKeyword_0; }

		//{Postconditions}
		public Action getPostconditionsAction_1() { return cPostconditionsAction_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//success=OnProcessSuccess?
		public Assignment getSuccessAssignment_3() { return cSuccessAssignment_3; }

		//OnProcessSuccess
		public RuleCall getSuccessOnProcessSuccessParserRuleCall_3_0() { return cSuccessOnProcessSuccessParserRuleCall_3_0; }

		//failure=OnProcessFailure?
		public Assignment getFailureAssignment_4() { return cFailureAssignment_4; }

		//OnProcessFailure
		public RuleCall getFailureOnProcessFailureParserRuleCall_4_0() { return cFailureOnProcessFailureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class OnProcessResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnProcessResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOnProcessSuccessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOnProcessFailureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OnProcessResult:
		//	OnProcessSuccess | OnProcessFailure;
		public ParserRule getRule() { return rule; }

		//OnProcessSuccess | OnProcessFailure
		public Alternatives getAlternatives() { return cAlternatives; }

		//OnProcessSuccess
		public RuleCall getOnProcessSuccessParserRuleCall_0() { return cOnProcessSuccessParserRuleCall_0; }

		//OnProcessFailure
		public RuleCall getOnProcessFailureParserRuleCall_1() { return cOnProcessFailureParserRuleCall_1; }
	}

	public class OnProcessSuccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnProcessSuccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSuccessKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResultsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cResultsEntityStateCrossReference_2_0 = (CrossReference)cResultsAssignment_2.eContents().get(0);
		private final RuleCall cResultsEntityStateQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cResultsEntityStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cResultsEntityStateCrossReference_3_1_0 = (CrossReference)cResultsAssignment_3_1.eContents().get(0);
		private final RuleCall cResultsEntityStateQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cResultsEntityStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OnProcessSuccess:
		//	"success" "[" results+=[EntityState|QualifiedName] ("," results+=[EntityState|QualifiedName])* "]";
		public ParserRule getRule() { return rule; }

		//"success" "[" results+=[EntityState|QualifiedName] ("," results+=[EntityState|QualifiedName])* "]"
		public Group getGroup() { return cGroup; }

		//"success"
		public Keyword getSuccessKeyword_0() { return cSuccessKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//results+=[EntityState|QualifiedName]
		public Assignment getResultsAssignment_2() { return cResultsAssignment_2; }

		//[EntityState|QualifiedName]
		public CrossReference getResultsEntityStateCrossReference_2_0() { return cResultsEntityStateCrossReference_2_0; }

		//QualifiedName
		public RuleCall getResultsEntityStateQualifiedNameParserRuleCall_2_0_1() { return cResultsEntityStateQualifiedNameParserRuleCall_2_0_1; }

		//("," results+=[EntityState|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//results+=[EntityState|QualifiedName]
		public Assignment getResultsAssignment_3_1() { return cResultsAssignment_3_1; }

		//[EntityState|QualifiedName]
		public CrossReference getResultsEntityStateCrossReference_3_1_0() { return cResultsEntityStateCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getResultsEntityStateQualifiedNameParserRuleCall_3_1_0_1() { return cResultsEntityStateQualifiedNameParserRuleCall_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class OnProcessFailureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OnProcessFailure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFailureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResultsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cResultsEntityStateCrossReference_2_0 = (CrossReference)cResultsAssignment_2.eContents().get(0);
		private final RuleCall cResultsEntityStateQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cResultsEntityStateCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cResultsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cResultsEntityStateCrossReference_3_1_0 = (CrossReference)cResultsAssignment_3_1.eContents().get(0);
		private final RuleCall cResultsEntityStateQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cResultsEntityStateCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OnProcessFailure:
		//	"failure" "[" results+=[EntityState|QualifiedName] ("," results+=[EntityState|QualifiedName])* "]";
		public ParserRule getRule() { return rule; }

		//"failure" "[" results+=[EntityState|QualifiedName] ("," results+=[EntityState|QualifiedName])* "]"
		public Group getGroup() { return cGroup; }

		//"failure"
		public Keyword getFailureKeyword_0() { return cFailureKeyword_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//results+=[EntityState|QualifiedName]
		public Assignment getResultsAssignment_2() { return cResultsAssignment_2; }

		//[EntityState|QualifiedName]
		public CrossReference getResultsEntityStateCrossReference_2_0() { return cResultsEntityStateCrossReference_2_0; }

		//QualifiedName
		public RuleCall getResultsEntityStateQualifiedNameParserRuleCall_2_0_1() { return cResultsEntityStateQualifiedNameParserRuleCall_2_0_1; }

		//("," results+=[EntityState|QualifiedName])*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//results+=[EntityState|QualifiedName]
		public Assignment getResultsAssignment_3_1() { return cResultsAssignment_3_1; }

		//[EntityState|QualifiedName]
		public CrossReference getResultsEntityStateCrossReference_3_1_0() { return cResultsEntityStateCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getResultsEntityStateQualifiedNameParserRuleCall_3_1_0_1() { return cResultsEntityStateQualifiedNameParserRuleCall_3_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class WorkflowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Workflow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantsWorkflowVariantParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariantsWorkflowVariantParserRuleCall_2_2_1_0 = (RuleCall)cVariantsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cRolesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRolesWorkflowRolesParserRuleCall_3_0 = (RuleCall)cRolesAssignment_3.eContents().get(0);
		private final Assignment cContentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentsWorkflowBlockParserRuleCall_4_0 = (RuleCall)cContentsAssignment_4.eContents().get(0);
		
		//Workflow:
		//	"workflow" name=ID ("<" variants+=WorkflowVariant ("," variants+=WorkflowVariant)* ">")? roles=WorkflowRoles
		//	contents=WorkflowBlock;
		public ParserRule getRule() { return rule; }

		//"workflow" name=ID ("<" variants+=WorkflowVariant ("," variants+=WorkflowVariant)* ">")? roles=WorkflowRoles
		//contents=WorkflowBlock
		public Group getGroup() { return cGroup; }

		//"workflow"
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" variants+=WorkflowVariant ("," variants+=WorkflowVariant)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//variants+=WorkflowVariant
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }

		//WorkflowVariant
		public RuleCall getVariantsWorkflowVariantParserRuleCall_2_1_0() { return cVariantsWorkflowVariantParserRuleCall_2_1_0; }

		//("," variants+=WorkflowVariant)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variants+=WorkflowVariant
		public Assignment getVariantsAssignment_2_2_1() { return cVariantsAssignment_2_2_1; }

		//WorkflowVariant
		public RuleCall getVariantsWorkflowVariantParserRuleCall_2_2_1_0() { return cVariantsWorkflowVariantParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//roles=WorkflowRoles
		public Assignment getRolesAssignment_3() { return cRolesAssignment_3; }

		//WorkflowRoles
		public RuleCall getRolesWorkflowRolesParserRuleCall_3_0() { return cRolesWorkflowRolesParserRuleCall_3_0; }

		//contents=WorkflowBlock
		public Assignment getContentsAssignment_4() { return cContentsAssignment_4; }

		//WorkflowBlock
		public RuleCall getContentsWorkflowBlockParserRuleCall_4_0() { return cContentsWorkflowBlockParserRuleCall_4_0; }
	}

	public class WorkflowVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowVariant");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//WorkflowVariant:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class WorkflowRolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowRoles");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRoleDeclarationsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProcessReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WorkflowRoles:
		//	RoleDeclarations | ProcessReference;
		public ParserRule getRule() { return rule; }

		//RoleDeclarations | ProcessReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//RoleDeclarations
		public RuleCall getRoleDeclarationsParserRuleCall_0() { return cRoleDeclarationsParserRuleCall_0; }

		//ProcessReference
		public RuleCall getProcessReferenceParserRuleCall_1() { return cProcessReferenceParserRuleCall_1; }
	}

	public class RoleDeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RoleDeclarations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRolesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRolesWorkflowRoleParserRuleCall_1_0 = (RuleCall)cRolesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRolesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRolesWorkflowRoleParserRuleCall_2_1_0 = (RuleCall)cRolesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RoleDeclarations:
		//	"(" roles+=WorkflowRole ("," roles+=WorkflowRole)+ ")";
		public ParserRule getRule() { return rule; }

		//"(" roles+=WorkflowRole ("," roles+=WorkflowRole)+ ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//roles+=WorkflowRole
		public Assignment getRolesAssignment_1() { return cRolesAssignment_1; }

		//WorkflowRole
		public RuleCall getRolesWorkflowRoleParserRuleCall_1_0() { return cRolesWorkflowRoleParserRuleCall_1_0; }

		//("," roles+=WorkflowRole)+
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//roles+=WorkflowRole
		public Assignment getRolesAssignment_2_1() { return cRolesAssignment_2_1; }

		//WorkflowRole
		public RuleCall getRolesWorkflowRoleParserRuleCall_2_1_0() { return cRolesWorkflowRoleParserRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class WorkflowRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowRole");
		private final RuleCall cRoleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//WorkflowRole:
		//	Role;
		public ParserRule getRule() { return rule; }

		//Role
		public RuleCall getRoleParserRuleCall() { return cRoleParserRuleCall; }
	}

	public class ProcessReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProcessReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImplementsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImplementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cImplementsProcessCrossReference_1_0 = (CrossReference)cImplementsAssignment_1.eContents().get(0);
		private final RuleCall cImplementsProcessQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cImplementsProcessCrossReference_1_0.eContents().get(1);
		
		//ProcessReference:
		//	"implements" implements=[Process|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"implements" implements=[Process|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"implements"
		public Keyword getImplementsKeyword_0() { return cImplementsKeyword_0; }

		//implements=[Process|QualifiedName]
		public Assignment getImplementsAssignment_1() { return cImplementsAssignment_1; }

		//[Process|QualifiedName]
		public CrossReference getImplementsProcessCrossReference_1_0() { return cImplementsProcessCrossReference_1_0; }

		//QualifiedName
		public RuleCall getImplementsProcessQualifiedNameParserRuleCall_1_0_1() { return cImplementsProcessQualifiedNameParserRuleCall_1_0_1; }
	}

	public class WorkflowBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsWorkflowElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		private final Assignment cElementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cElementsEndPointParserRuleCall_2_0 = (RuleCall)cElementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WorkflowBlock:
		//	"{" elements+=WorkflowElement* elements+=EndPoint "}";
		public ParserRule getRule() { return rule; }

		//"{" elements+=WorkflowElement* elements+=EndPoint "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//elements+=WorkflowElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//WorkflowElement
		public RuleCall getElementsWorkflowElementParserRuleCall_1_0() { return cElementsWorkflowElementParserRuleCall_1_0; }

		//elements+=EndPoint
		public Assignment getElementsAssignment_2() { return cElementsAssignment_2; }

		//EndPoint
		public RuleCall getElementsEndPointParserRuleCall_2_0() { return cElementsEndPointParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class EndPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EndPoint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameSuccessKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameFailureKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		
		//EndPoint:
		//	name="success" | name="failure";
		public ParserRule getRule() { return rule; }

		//name="success" | name="failure"
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="success"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"success"
		public Keyword getNameSuccessKeyword_0_0() { return cNameSuccessKeyword_0_0; }

		//name="failure"
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//"failure"
		public Keyword getNameFailureKeyword_1_0() { return cNameFailureKeyword_1_0; }
	}

	public class WorkflowElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkflowBranchParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkflowActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WorkflowElement:
		//	WorkflowBranch | WorkflowAction;
		public ParserRule getRule() { return rule; }

		//WorkflowBranch | WorkflowAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//WorkflowBranch
		public RuleCall getWorkflowBranchParserRuleCall_0() { return cWorkflowBranchParserRuleCall_0; }

		//WorkflowAction
		public RuleCall getWorkflowActionParserRuleCall_1() { return cWorkflowActionParserRuleCall_1; }
	}

	public class WorkflowBranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowBranch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBranchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionsBranchConditionParserRuleCall_2_0 = (RuleCall)cConditionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WorkflowBranch:
		//	"branch" "{" conditions+=BranchCondition+ "}";
		public ParserRule getRule() { return rule; }

		//"branch" "{" conditions+=BranchCondition+ "}"
		public Group getGroup() { return cGroup; }

		//"branch"
		public Keyword getBranchKeyword_0() { return cBranchKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//conditions+=BranchCondition+
		public Assignment getConditionsAssignment_2() { return cConditionsAssignment_2; }

		//BranchCondition
		public RuleCall getConditionsBranchConditionParserRuleCall_2_0() { return cConditionsBranchConditionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BranchConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BranchCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBooleanExpressionParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cContentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cContentsWorkflowBlockParserRuleCall_4_0 = (RuleCall)cContentsAssignment_4.eContents().get(0);
		
		//BranchCondition:
		//	"condition" "(" BooleanExpression ")" contents=WorkflowBlock;
		public ParserRule getRule() { return rule; }

		//"condition" "(" BooleanExpression ")" contents=WorkflowBlock
		public Group getGroup() { return cGroup; }

		//"condition"
		public Keyword getConditionKeyword_0() { return cConditionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_2() { return cBooleanExpressionParserRuleCall_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//contents=WorkflowBlock
		public Assignment getContentsAssignment_4() { return cContentsAssignment_4; }

		//WorkflowBlock
		public RuleCall getContentsWorkflowBlockParserRuleCall_4_0() { return cContentsWorkflowBlockParserRuleCall_4_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExpression:
		//	STRING;
		public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class WorkflowActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTransactionCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkflowCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WorkflowAction:
		//	TransactionCall | WorkflowCall;
		public ParserRule getRule() { return rule; }

		//TransactionCall | WorkflowCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//TransactionCall
		public RuleCall getTransactionCallParserRuleCall_0() { return cTransactionCallParserRuleCall_0; }

		//WorkflowCall
		public RuleCall getWorkflowCallParserRuleCall_1() { return cWorkflowCallParserRuleCall_1; }
	}

	public class TransactionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransactionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransactionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameTransactionCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameTransactionQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cNameTransactionCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantMappingParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantMappingParserRuleCall_2_2_1_0 = (RuleCall)cVariantsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSenderAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSenderSenderRoleMappingParserRuleCall_4_0 = (RuleCall)cSenderAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cReceiverAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cReceiverReceiverRoleMappingParserRuleCall_6_0 = (RuleCall)cReceiverAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TransactionCall:
		//	"transaction" name=[Transaction|QualifiedName] ("<" variants+=TransactionVariantMapping (","
		//	variants+=TransactionVariantMapping)* ">")? "(" sender=SenderRoleMapping "," receiver=ReceiverRoleMapping ")";
		public ParserRule getRule() { return rule; }

		//"transaction" name=[Transaction|QualifiedName] ("<" variants+=TransactionVariantMapping (","
		//variants+=TransactionVariantMapping)* ">")? "(" sender=SenderRoleMapping "," receiver=ReceiverRoleMapping ")"
		public Group getGroup() { return cGroup; }

		//"transaction"
		public Keyword getTransactionKeyword_0() { return cTransactionKeyword_0; }

		//name=[Transaction|QualifiedName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Transaction|QualifiedName]
		public CrossReference getNameTransactionCrossReference_1_0() { return cNameTransactionCrossReference_1_0; }

		//QualifiedName
		public RuleCall getNameTransactionQualifiedNameParserRuleCall_1_0_1() { return cNameTransactionQualifiedNameParserRuleCall_1_0_1; }

		//("<" variants+=TransactionVariantMapping ("," variants+=TransactionVariantMapping)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//variants+=TransactionVariantMapping
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }

		//TransactionVariantMapping
		public RuleCall getVariantsTransactionVariantMappingParserRuleCall_2_1_0() { return cVariantsTransactionVariantMappingParserRuleCall_2_1_0; }

		//("," variants+=TransactionVariantMapping)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variants+=TransactionVariantMapping
		public Assignment getVariantsAssignment_2_2_1() { return cVariantsAssignment_2_2_1; }

		//TransactionVariantMapping
		public RuleCall getVariantsTransactionVariantMappingParserRuleCall_2_2_1_0() { return cVariantsTransactionVariantMappingParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//sender=SenderRoleMapping
		public Assignment getSenderAssignment_4() { return cSenderAssignment_4; }

		//SenderRoleMapping
		public RuleCall getSenderSenderRoleMappingParserRuleCall_4_0() { return cSenderSenderRoleMappingParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//receiver=ReceiverRoleMapping
		public Assignment getReceiverAssignment_6() { return cReceiverAssignment_6; }

		//ReceiverRoleMapping
		public RuleCall getReceiverReceiverRoleMappingParserRuleCall_6_0() { return cReceiverReceiverRoleMappingParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class TransactionVariantMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransactionVariantMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterTransactionVariantCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterTransactionVariantQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterTransactionVariantCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueWorkflowVariantCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueWorkflowVariantIDTerminalRuleCall_2_0_1 = (RuleCall)cValueWorkflowVariantCrossReference_2_0.eContents().get(1);
		
		//TransactionVariantMapping:
		//	parameter=[TransactionVariant|QualifiedName] "=" value=[WorkflowVariant];
		public ParserRule getRule() { return rule; }

		//parameter=[TransactionVariant|QualifiedName] "=" value=[WorkflowVariant]
		public Group getGroup() { return cGroup; }

		//parameter=[TransactionVariant|QualifiedName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[TransactionVariant|QualifiedName]
		public CrossReference getParameterTransactionVariantCrossReference_0_0() { return cParameterTransactionVariantCrossReference_0_0; }

		//QualifiedName
		public RuleCall getParameterTransactionVariantQualifiedNameParserRuleCall_0_0_1() { return cParameterTransactionVariantQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=[WorkflowVariant]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[WorkflowVariant]
		public CrossReference getValueWorkflowVariantCrossReference_2_0() { return cValueWorkflowVariantCrossReference_2_0; }

		//ID
		public RuleCall getValueWorkflowVariantIDTerminalRuleCall_2_0_1() { return cValueWorkflowVariantIDTerminalRuleCall_2_0_1; }
	}

	public class SenderRoleMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SenderRoleMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cParameterSenderKeyword_0_0 = (Keyword)cParameterAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueWorkflowRoleCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueWorkflowRoleIDTerminalRuleCall_2_0_1 = (RuleCall)cValueWorkflowRoleCrossReference_2_0.eContents().get(1);
		
		//SenderRoleMapping:
		//	parameter="sender" "=" value=[WorkflowRole];
		public ParserRule getRule() { return rule; }

		//parameter="sender" "=" value=[WorkflowRole]
		public Group getGroup() { return cGroup; }

		//parameter="sender"
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//"sender"
		public Keyword getParameterSenderKeyword_0_0() { return cParameterSenderKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=[WorkflowRole]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[WorkflowRole]
		public CrossReference getValueWorkflowRoleCrossReference_2_0() { return cValueWorkflowRoleCrossReference_2_0; }

		//ID
		public RuleCall getValueWorkflowRoleIDTerminalRuleCall_2_0_1() { return cValueWorkflowRoleIDTerminalRuleCall_2_0_1; }
	}

	public class ReceiverRoleMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReceiverRoleMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cParameterReceiverKeyword_0_0 = (Keyword)cParameterAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueWorkflowRoleCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueWorkflowRoleIDTerminalRuleCall_2_0_1 = (RuleCall)cValueWorkflowRoleCrossReference_2_0.eContents().get(1);
		
		//ReceiverRoleMapping:
		//	parameter="receiver" "=" value=[WorkflowRole];
		public ParserRule getRule() { return rule; }

		//parameter="receiver" "=" value=[WorkflowRole]
		public Group getGroup() { return cGroup; }

		//parameter="receiver"
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//"receiver"
		public Keyword getParameterReceiverKeyword_0_0() { return cParameterReceiverKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=[WorkflowRole]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[WorkflowRole]
		public CrossReference getValueWorkflowRoleCrossReference_2_0() { return cValueWorkflowRoleCrossReference_2_0; }

		//ID
		public RuleCall getValueWorkflowRoleIDTerminalRuleCall_2_0_1() { return cValueWorkflowRoleIDTerminalRuleCall_2_0_1; }
	}

	public class WorkflowCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWorkflowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameWorkflowCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameWorkflowQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cNameWorkflowCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantsWorkflowVariantMappingParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariantsWorkflowVariantMappingParserRuleCall_2_2_1_0 = (RuleCall)cVariantsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesWorkflowRoleMappingParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cRolesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cRolesWorkflowRoleMappingParserRuleCall_5_1_0 = (RuleCall)cRolesAssignment_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//WorkflowCall:
		//	"workflow" name=[Workflow|QualifiedName] ("<" variants+=WorkflowVariantMapping ("," variants+=WorkflowVariantMapping)*
		//	">")? "(" roles+=WorkflowRoleMapping ("," roles+=WorkflowRoleMapping)+ ")";
		public ParserRule getRule() { return rule; }

		//"workflow" name=[Workflow|QualifiedName] ("<" variants+=WorkflowVariantMapping ("," variants+=WorkflowVariantMapping)*
		//">")? "(" roles+=WorkflowRoleMapping ("," roles+=WorkflowRoleMapping)+ ")"
		public Group getGroup() { return cGroup; }

		//"workflow"
		public Keyword getWorkflowKeyword_0() { return cWorkflowKeyword_0; }

		//name=[Workflow|QualifiedName]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[Workflow|QualifiedName]
		public CrossReference getNameWorkflowCrossReference_1_0() { return cNameWorkflowCrossReference_1_0; }

		//QualifiedName
		public RuleCall getNameWorkflowQualifiedNameParserRuleCall_1_0_1() { return cNameWorkflowQualifiedNameParserRuleCall_1_0_1; }

		//("<" variants+=WorkflowVariantMapping ("," variants+=WorkflowVariantMapping)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//variants+=WorkflowVariantMapping
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }

		//WorkflowVariantMapping
		public RuleCall getVariantsWorkflowVariantMappingParserRuleCall_2_1_0() { return cVariantsWorkflowVariantMappingParserRuleCall_2_1_0; }

		//("," variants+=WorkflowVariantMapping)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variants+=WorkflowVariantMapping
		public Assignment getVariantsAssignment_2_2_1() { return cVariantsAssignment_2_2_1; }

		//WorkflowVariantMapping
		public RuleCall getVariantsWorkflowVariantMappingParserRuleCall_2_2_1_0() { return cVariantsWorkflowVariantMappingParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//roles+=WorkflowRoleMapping
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }

		//WorkflowRoleMapping
		public RuleCall getRolesWorkflowRoleMappingParserRuleCall_4_0() { return cRolesWorkflowRoleMappingParserRuleCall_4_0; }

		//("," roles+=WorkflowRoleMapping)+
		public Group getGroup_5() { return cGroup_5; }

		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }

		//roles+=WorkflowRoleMapping
		public Assignment getRolesAssignment_5_1() { return cRolesAssignment_5_1; }

		//WorkflowRoleMapping
		public RuleCall getRolesWorkflowRoleMappingParserRuleCall_5_1_0() { return cRolesWorkflowRoleMappingParserRuleCall_5_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class WorkflowVariantMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowVariantMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterWorkflowVariantCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterWorkflowVariantQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterWorkflowVariantCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueWorkflowVariantCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueWorkflowVariantIDTerminalRuleCall_2_0_1 = (RuleCall)cValueWorkflowVariantCrossReference_2_0.eContents().get(1);
		
		//WorkflowVariantMapping:
		//	parameter=[WorkflowVariant|QualifiedName] "=" value=[WorkflowVariant];
		public ParserRule getRule() { return rule; }

		//parameter=[WorkflowVariant|QualifiedName] "=" value=[WorkflowVariant]
		public Group getGroup() { return cGroup; }

		//parameter=[WorkflowVariant|QualifiedName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[WorkflowVariant|QualifiedName]
		public CrossReference getParameterWorkflowVariantCrossReference_0_0() { return cParameterWorkflowVariantCrossReference_0_0; }

		//QualifiedName
		public RuleCall getParameterWorkflowVariantQualifiedNameParserRuleCall_0_0_1() { return cParameterWorkflowVariantQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=[WorkflowVariant]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[WorkflowVariant]
		public CrossReference getValueWorkflowVariantCrossReference_2_0() { return cValueWorkflowVariantCrossReference_2_0; }

		//ID
		public RuleCall getValueWorkflowVariantIDTerminalRuleCall_2_0_1() { return cValueWorkflowVariantIDTerminalRuleCall_2_0_1; }
	}

	public class WorkflowRoleMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowRoleMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cParameterWorkflowRoleCrossReference_0_0 = (CrossReference)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterWorkflowRoleQualifiedNameParserRuleCall_0_0_1 = (RuleCall)cParameterWorkflowRoleCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cValueWorkflowRoleReferenceCrossReference_2_0 = (CrossReference)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueWorkflowRoleReferenceQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cValueWorkflowRoleReferenceCrossReference_2_0.eContents().get(1);
		
		//WorkflowRoleMapping:
		//	parameter=[WorkflowRole|QualifiedName] "=" value=[WorkflowRoleReference|QualifiedName];
		public ParserRule getRule() { return rule; }

		//parameter=[WorkflowRole|QualifiedName] "=" value=[WorkflowRoleReference|QualifiedName]
		public Group getGroup() { return cGroup; }

		//parameter=[WorkflowRole|QualifiedName]
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//[WorkflowRole|QualifiedName]
		public CrossReference getParameterWorkflowRoleCrossReference_0_0() { return cParameterWorkflowRoleCrossReference_0_0; }

		//QualifiedName
		public RuleCall getParameterWorkflowRoleQualifiedNameParserRuleCall_0_0_1() { return cParameterWorkflowRoleQualifiedNameParserRuleCall_0_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=[WorkflowRoleReference|QualifiedName]
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//[WorkflowRoleReference|QualifiedName]
		public CrossReference getValueWorkflowRoleReferenceCrossReference_2_0() { return cValueWorkflowRoleReferenceCrossReference_2_0; }

		//QualifiedName
		public RuleCall getValueWorkflowRoleReferenceQualifiedNameParserRuleCall_2_0_1() { return cValueWorkflowRoleReferenceQualifiedNameParserRuleCall_2_0_1; }
	}

	public class WorkflowRoleReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WorkflowRoleReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProcessRoleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkflowRoleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//WorkflowRoleReference:
		//	ProcessRole | WorkflowRole;
		public ParserRule getRule() { return rule; }

		//ProcessRole | WorkflowRole
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProcessRole
		public RuleCall getProcessRoleParserRuleCall_0() { return cProcessRoleParserRuleCall_0; }

		//WorkflowRole
		public RuleCall getWorkflowRoleParserRuleCall_1() { return cWorkflowRoleParserRuleCall_1; }
	}

	public class TransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transaction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInformTransactionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotifyTransactionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRequestTransactionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Transaction:
		//	InformTransaction | NotifyTransaction | RequestTransaction;
		public ParserRule getRule() { return rule; }

		//InformTransaction | NotifyTransaction | RequestTransaction
		public Alternatives getAlternatives() { return cAlternatives; }

		//InformTransaction
		public RuleCall getInformTransactionParserRuleCall_0() { return cInformTransactionParserRuleCall_0; }

		//NotifyTransaction
		public RuleCall getNotifyTransactionParserRuleCall_1() { return cNotifyTransactionParserRuleCall_1; }

		//RequestTransaction
		public RuleCall getRequestTransactionParserRuleCall_2() { return cRequestTransactionParserRuleCall_2; }
	}

	public class InformTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InformTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPatternInformKeyword_0_0 = (Keyword)cPatternAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantParserRuleCall_2_2_1_0 = (RuleCall)cVariantsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSendKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSendActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSendActionDatagramActionParserRuleCall_5_0 = (RuleCall)cSendActionAssignment_5.eContents().get(0);
		private final Assignment cPostconditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPostconditionsPostconditionsParserRuleCall_6_0 = (RuleCall)cPostconditionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InformTransaction:
		//	pattern="inform" name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
		//	sendAction=DatagramAction postconditions=Postconditions? "}";
		public ParserRule getRule() { return rule; }

		//pattern="inform" name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
		//sendAction=DatagramAction postconditions=Postconditions? "}"
		public Group getGroup() { return cGroup; }

		//pattern="inform"
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//"inform"
		public Keyword getPatternInformKeyword_0_0() { return cPatternInformKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//variants+=TransactionVariant
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }

		//TransactionVariant
		public RuleCall getVariantsTransactionVariantParserRuleCall_2_1_0() { return cVariantsTransactionVariantParserRuleCall_2_1_0; }

		//("," variants+=TransactionVariant)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variants+=TransactionVariant
		public Assignment getVariantsAssignment_2_2_1() { return cVariantsAssignment_2_2_1; }

		//TransactionVariant
		public RuleCall getVariantsTransactionVariantParserRuleCall_2_2_1_0() { return cVariantsTransactionVariantParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"send"
		public Keyword getSendKeyword_4() { return cSendKeyword_4; }

		//sendAction=DatagramAction
		public Assignment getSendActionAssignment_5() { return cSendActionAssignment_5; }

		//DatagramAction
		public RuleCall getSendActionDatagramActionParserRuleCall_5_0() { return cSendActionDatagramActionParserRuleCall_5_0; }

		//postconditions=Postconditions?
		public Assignment getPostconditionsAssignment_6() { return cPostconditionsAssignment_6; }

		//Postconditions
		public RuleCall getPostconditionsPostconditionsParserRuleCall_6_0() { return cPostconditionsPostconditionsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TransactionVariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransactionVariant");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TransactionVariant:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class DatagramActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatagramAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatagramActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessagesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessagesVariantMessageMappingsParserRuleCall_2_0 = (RuleCall)cMessagesAssignment_2.eContents().get(0);
		private final Assignment cRequiresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRequiresRequiredFeaturesParserRuleCall_3_0 = (RuleCall)cRequiresAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DatagramAction:
		//	{DatagramAction} "{" messages=VariantMessageMappings? requires=RequiredFeatures? "}";
		public ParserRule getRule() { return rule; }

		//{DatagramAction} "{" messages=VariantMessageMappings? requires=RequiredFeatures? "}"
		public Group getGroup() { return cGroup; }

		//{DatagramAction}
		public Action getDatagramActionAction_0() { return cDatagramActionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//messages=VariantMessageMappings?
		public Assignment getMessagesAssignment_2() { return cMessagesAssignment_2; }

		//VariantMessageMappings
		public RuleCall getMessagesVariantMessageMappingsParserRuleCall_2_0() { return cMessagesVariantMessageMappingsParserRuleCall_2_0; }

		//requires=RequiredFeatures?
		public Assignment getRequiresAssignment_3() { return cRequiresAssignment_3; }

		//RequiredFeatures
		public RuleCall getRequiresRequiredFeaturesParserRuleCall_3_0() { return cRequiresRequiredFeaturesParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VariantMessageMappingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariantMessageMappings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessagesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVariantsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariantsVariantMessageMappingParserRuleCall_2_0 = (RuleCall)cVariantsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariantsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariantsVariantMessageMappingParserRuleCall_3_1_0 = (RuleCall)cVariantsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariantMessageMappings:
		//	"messages" "{" variants+=VariantMessageMapping ("," variants+=VariantMessageMapping)* "}";
		public ParserRule getRule() { return rule; }

		//"messages" "{" variants+=VariantMessageMapping ("," variants+=VariantMessageMapping)* "}"
		public Group getGroup() { return cGroup; }

		//"messages"
		public Keyword getMessagesKeyword_0() { return cMessagesKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//variants+=VariantMessageMapping
		public Assignment getVariantsAssignment_2() { return cVariantsAssignment_2; }

		//VariantMessageMapping
		public RuleCall getVariantsVariantMessageMappingParserRuleCall_2_0() { return cVariantsVariantMessageMappingParserRuleCall_2_0; }

		//("," variants+=VariantMessageMapping)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variants+=VariantMessageMapping
		public Assignment getVariantsAssignment_3_1() { return cVariantsAssignment_3_1; }

		//VariantMessageMapping
		public RuleCall getVariantsVariantMessageMappingParserRuleCall_3_1_0() { return cVariantsVariantMessageMappingParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VariantMessageMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariantMessageMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariantTransactionVariantCrossReference_0_0 = (CrossReference)cVariantAssignment_0.eContents().get(0);
		private final RuleCall cVariantTransactionVariantIDTerminalRuleCall_0_0_1 = (RuleCall)cVariantTransactionVariantCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMappingsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMappingsMessageMappingParserRuleCall_2_0 = (RuleCall)cMappingsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMappingsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMappingsMessageMappingParserRuleCall_3_1_0 = (RuleCall)cMappingsAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariantMessageMapping:
		//	variant=[TransactionVariant] "<" mappings+=MessageMapping ("," mappings+=MessageMapping)* ">";
		public ParserRule getRule() { return rule; }

		//variant=[TransactionVariant] "<" mappings+=MessageMapping ("," mappings+=MessageMapping)* ">"
		public Group getGroup() { return cGroup; }

		//variant=[TransactionVariant]
		public Assignment getVariantAssignment_0() { return cVariantAssignment_0; }

		//[TransactionVariant]
		public CrossReference getVariantTransactionVariantCrossReference_0_0() { return cVariantTransactionVariantCrossReference_0_0; }

		//ID
		public RuleCall getVariantTransactionVariantIDTerminalRuleCall_0_0_1() { return cVariantTransactionVariantIDTerminalRuleCall_0_0_1; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//mappings+=MessageMapping
		public Assignment getMappingsAssignment_2() { return cMappingsAssignment_2; }

		//MessageMapping
		public RuleCall getMappingsMessageMappingParserRuleCall_2_0() { return cMappingsMessageMappingParserRuleCall_2_0; }

		//("," mappings+=MessageMapping)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//mappings+=MessageMapping
		public Assignment getMappingsAssignment_3_1() { return cMappingsAssignment_3_1; }

		//MessageMapping
		public RuleCall getMappingsMessageMappingParserRuleCall_3_1_0() { return cMappingsMessageMappingParserRuleCall_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
	}

	public class MessageMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterMessageNameParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueMessageNameParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//MessageMapping:
		//	parameter=MessageName "=" value=MessageName;
		public ParserRule getRule() { return rule; }

		//parameter=MessageName "=" value=MessageName
		public Group getGroup() { return cGroup; }

		//parameter=MessageName
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//MessageName
		public RuleCall getParameterMessageNameParserRuleCall_0_0() { return cParameterMessageNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=MessageName
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//MessageName
		public RuleCall getValueMessageNameParserRuleCall_2_0() { return cValueMessageNameParserRuleCall_2_0; }
	}

	public class MessageNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageName");
		private final RuleCall cQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//MessageName:
		//	QualifiedName;
		public ParserRule getRule() { return rule; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall() { return cQualifiedNameParserRuleCall; }
	}

	public class RequiredFeaturesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredFeatures");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiresKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFeaturesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFeaturesRequiredFeatureParserRuleCall_2_0 = (RuleCall)cFeaturesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFeaturesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFeaturesRequiredFeatureParserRuleCall_3_1_0 = (RuleCall)cFeaturesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RequiredFeatures:
		//	"requires" "(" features+=RequiredFeature ("," features+=RequiredFeature)? ")";
		public ParserRule getRule() { return rule; }

		//"requires" "(" features+=RequiredFeature ("," features+=RequiredFeature)? ")"
		public Group getGroup() { return cGroup; }

		//"requires"
		public Keyword getRequiresKeyword_0() { return cRequiresKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//features+=RequiredFeature
		public Assignment getFeaturesAssignment_2() { return cFeaturesAssignment_2; }

		//RequiredFeature
		public RuleCall getFeaturesRequiredFeatureParserRuleCall_2_0() { return cFeaturesRequiredFeatureParserRuleCall_2_0; }

		//("," features+=RequiredFeature)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//features+=RequiredFeature
		public Assignment getFeaturesAssignment_3_1() { return cFeaturesAssignment_3_1; }

		//RequiredFeature
		public RuleCall getFeaturesRequiredFeatureParserRuleCall_3_1_0() { return cFeaturesRequiredFeatureParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class RequiredFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredFeature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAuthorizationFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonRepudiationFeatureParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//RequiredFeature:
		//	AuthorizationFeature | NonRepudiationFeature;
		public ParserRule getRule() { return rule; }

		//AuthorizationFeature | NonRepudiationFeature
		public Alternatives getAlternatives() { return cAlternatives; }

		//AuthorizationFeature
		public RuleCall getAuthorizationFeatureParserRuleCall_0() { return cAuthorizationFeatureParserRuleCall_0; }

		//NonRepudiationFeature
		public RuleCall getNonRepudiationFeatureParserRuleCall_1() { return cNonRepudiationFeatureParserRuleCall_1; }
	}

	public class AuthorizationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuthorizationFeature");
		private final Assignment cAuthorizationAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cAuthorizationAuthorizationKeyword_0 = (Keyword)cAuthorizationAssignment.eContents().get(0);
		
		//AuthorizationFeature:
		//	authorization?="authorization";
		public ParserRule getRule() { return rule; }

		//authorization?="authorization"
		public Assignment getAuthorizationAssignment() { return cAuthorizationAssignment; }

		//"authorization"
		public Keyword getAuthorizationAuthorizationKeyword_0() { return cAuthorizationAuthorizationKeyword_0; }
	}

	public class NonRepudiationFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonRepudiationFeature");
		private final Assignment cNonrepudiationAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNonrepudiationNonrepudiationKeyword_0 = (Keyword)cNonrepudiationAssignment.eContents().get(0);
		
		//NonRepudiationFeature:
		//	nonrepudiation?="nonrepudiation";
		public ParserRule getRule() { return rule; }

		//nonrepudiation?="nonrepudiation"
		public Assignment getNonrepudiationAssignment() { return cNonrepudiationAssignment; }

		//"nonrepudiation"
		public Keyword getNonrepudiationNonrepudiationKeyword_0() { return cNonrepudiationNonrepudiationKeyword_0; }
	}

	public class NotifyTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotifyTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPatternNotifyKeyword_0_0 = (Keyword)cPatternAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantParserRuleCall_2_2_1_0 = (RuleCall)cVariantsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSendKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSendActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSendActionOneWayActionParserRuleCall_5_0 = (RuleCall)cSendActionAssignment_5.eContents().get(0);
		private final Assignment cPostconditionsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPostconditionsPostconditionsParserRuleCall_6_0 = (RuleCall)cPostconditionsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//NotifyTransaction:
		//	pattern="notify" name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
		//	sendAction=OneWayAction postconditions=Postconditions? "}";
		public ParserRule getRule() { return rule; }

		//pattern="notify" name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
		//sendAction=OneWayAction postconditions=Postconditions? "}"
		public Group getGroup() { return cGroup; }

		//pattern="notify"
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//"notify"
		public Keyword getPatternNotifyKeyword_0_0() { return cPatternNotifyKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//variants+=TransactionVariant
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }

		//TransactionVariant
		public RuleCall getVariantsTransactionVariantParserRuleCall_2_1_0() { return cVariantsTransactionVariantParserRuleCall_2_1_0; }

		//("," variants+=TransactionVariant)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variants+=TransactionVariant
		public Assignment getVariantsAssignment_2_2_1() { return cVariantsAssignment_2_2_1; }

		//TransactionVariant
		public RuleCall getVariantsTransactionVariantParserRuleCall_2_2_1_0() { return cVariantsTransactionVariantParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"send"
		public Keyword getSendKeyword_4() { return cSendKeyword_4; }

		//sendAction=OneWayAction
		public Assignment getSendActionAssignment_5() { return cSendActionAssignment_5; }

		//OneWayAction
		public RuleCall getSendActionOneWayActionParserRuleCall_5_0() { return cSendActionOneWayActionParserRuleCall_5_0; }

		//postconditions=Postconditions?
		public Assignment getPostconditionsAssignment_6() { return cPostconditionsAssignment_6; }

		//Postconditions
		public RuleCall getPostconditionsPostconditionsParserRuleCall_6_0() { return cPostconditionsPostconditionsParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OneWayActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneWayAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessagesVariantMessageMappingsParserRuleCall_1_0 = (RuleCall)cMessagesAssignment_1.eContents().get(0);
		private final Assignment cRequiresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiresRequiredFeaturesParserRuleCall_2_0 = (RuleCall)cRequiresAssignment_2.eContents().get(0);
		private final Assignment cTimeoutsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeoutsOneWayTimeOutsParserRuleCall_3_0 = (RuleCall)cTimeoutsAssignment_3.eContents().get(0);
		private final Keyword cRetriesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRetriesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRetriesINTTerminalRuleCall_6_0 = (RuleCall)cRetriesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//OneWayAction:
		//	"{" messages=VariantMessageMappings? requires=RequiredFeatures? timeouts=OneWayTimeOuts "retries" "=" retries=INT "}";
		public ParserRule getRule() { return rule; }

		//"{" messages=VariantMessageMappings? requires=RequiredFeatures? timeouts=OneWayTimeOuts "retries" "=" retries=INT "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//messages=VariantMessageMappings?
		public Assignment getMessagesAssignment_1() { return cMessagesAssignment_1; }

		//VariantMessageMappings
		public RuleCall getMessagesVariantMessageMappingsParserRuleCall_1_0() { return cMessagesVariantMessageMappingsParserRuleCall_1_0; }

		//requires=RequiredFeatures?
		public Assignment getRequiresAssignment_2() { return cRequiresAssignment_2; }

		//RequiredFeatures
		public RuleCall getRequiresRequiredFeaturesParserRuleCall_2_0() { return cRequiresRequiredFeaturesParserRuleCall_2_0; }

		//timeouts=OneWayTimeOuts
		public Assignment getTimeoutsAssignment_3() { return cTimeoutsAssignment_3; }

		//OneWayTimeOuts
		public RuleCall getTimeoutsOneWayTimeOutsParserRuleCall_3_0() { return cTimeoutsOneWayTimeOutsParserRuleCall_3_0; }

		//"retries"
		public Keyword getRetriesKeyword_4() { return cRetriesKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//retries=INT
		public Assignment getRetriesAssignment_6() { return cRetriesAssignment_6; }

		//INT
		public RuleCall getRetriesINTTerminalRuleCall_6_0() { return cRetriesINTTerminalRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class OneWayTimeOutsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneWayTimeOuts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeoutsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutsOneWayTimeOutParserRuleCall_2_0 = (RuleCall)cTimeoutsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeoutsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeoutsOneWayTimeOutParserRuleCall_3_1_0 = (RuleCall)cTimeoutsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//OneWayTimeOuts:
		//	"timeouts" "(" timeouts+=OneWayTimeOut ("," timeouts+=OneWayTimeOut)? ")";
		public ParserRule getRule() { return rule; }

		//"timeouts" "(" timeouts+=OneWayTimeOut ("," timeouts+=OneWayTimeOut)? ")"
		public Group getGroup() { return cGroup; }

		//"timeouts"
		public Keyword getTimeoutsKeyword_0() { return cTimeoutsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//timeouts+=OneWayTimeOut
		public Assignment getTimeoutsAssignment_2() { return cTimeoutsAssignment_2; }

		//OneWayTimeOut
		public RuleCall getTimeoutsOneWayTimeOutParserRuleCall_2_0() { return cTimeoutsOneWayTimeOutParserRuleCall_2_0; }

		//("," timeouts+=OneWayTimeOut)?
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//timeouts+=OneWayTimeOut
		public Assignment getTimeoutsAssignment_3_1() { return cTimeoutsAssignment_3_1; }

		//OneWayTimeOut
		public RuleCall getTimeoutsOneWayTimeOutParserRuleCall_3_1_0() { return cTimeoutsOneWayTimeOutParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class OneWayTimeOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OneWayTimeOut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReceiptAckTimeOutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidationAckTimeOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//OneWayTimeOut:
		//	ReceiptAckTimeOut | ValidationAckTimeOut;
		public ParserRule getRule() { return rule; }

		//ReceiptAckTimeOut | ValidationAckTimeOut
		public Alternatives getAlternatives() { return cAlternatives; }

		//ReceiptAckTimeOut
		public RuleCall getReceiptAckTimeOutParserRuleCall_0() { return cReceiptAckTimeOutParserRuleCall_0; }

		//ValidationAckTimeOut
		public RuleCall getValidationAckTimeOutParserRuleCall_1() { return cValidationAckTimeOutParserRuleCall_1; }
	}

	public class ReceiptAckTimeOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReceiptAckTimeOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReceiptKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutTimeOutParserRuleCall_2_0 = (RuleCall)cTimeoutAssignment_2.eContents().get(0);
		
		//ReceiptAckTimeOut:
		//	"receipt" "=" timeout=TimeOut;
		public ParserRule getRule() { return rule; }

		//"receipt" "=" timeout=TimeOut
		public Group getGroup() { return cGroup; }

		//"receipt"
		public Keyword getReceiptKeyword_0() { return cReceiptKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//timeout=TimeOut
		public Assignment getTimeoutAssignment_2() { return cTimeoutAssignment_2; }

		//TimeOut
		public RuleCall getTimeoutTimeOutParserRuleCall_2_0() { return cTimeoutTimeOutParserRuleCall_2_0; }
	}

	public class TimeOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitTimeUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//TimeOut:
		//	value=INT unit=TimeUnit;
		public ParserRule getRule() { return rule; }

		//value=INT unit=TimeUnit
		public Group getGroup() { return cGroup; }

		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }

		//unit=TimeUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//TimeUnit
		public RuleCall getUnitTimeUnitEnumRuleCall_1_0() { return cUnitTimeUnitEnumRuleCall_1_0; }
	}

	public class ValidationAckTimeOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValidationAckTimeOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValidationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutTimeOutParserRuleCall_2_0 = (RuleCall)cTimeoutAssignment_2.eContents().get(0);
		
		//ValidationAckTimeOut:
		//	"validation" "=" timeout=TimeOut;
		public ParserRule getRule() { return rule; }

		//"validation" "=" timeout=TimeOut
		public Group getGroup() { return cGroup; }

		//"validation"
		public Keyword getValidationKeyword_0() { return cValidationKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//timeout=TimeOut
		public Assignment getTimeoutAssignment_2() { return cTimeoutAssignment_2; }

		//TimeOut
		public RuleCall getTimeoutTimeOutParserRuleCall_2_0() { return cTimeoutTimeOutParserRuleCall_2_0; }
	}

	public class RequestTransactionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequestTransaction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPatternAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPatternPatternEnumRuleCall_0_0 = (RuleCall)cPatternAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantParserRuleCall_2_1_0 = (RuleCall)cVariantsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cVariantsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cVariantsTransactionVariantParserRuleCall_2_2_1_0 = (RuleCall)cVariantsAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cSendKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSendActionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSendActionTwoWayActionParserRuleCall_5_0 = (RuleCall)cSendActionAssignment_5.eContents().get(0);
		private final Keyword cReceiveKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReceiveActionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReceiveActionOneWayActionParserRuleCall_7_0 = (RuleCall)cReceiveActionAssignment_7.eContents().get(0);
		private final Assignment cPostconditionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPostconditionsPostconditionsParserRuleCall_8_0 = (RuleCall)cPostconditionsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//RequestTransaction:
		//	pattern=Pattern name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
		//	sendAction=TwoWayAction "receive" receiveAction=OneWayAction postconditions=Postconditions? "}";
		public ParserRule getRule() { return rule; }

		//pattern=Pattern name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
		//sendAction=TwoWayAction "receive" receiveAction=OneWayAction postconditions=Postconditions? "}"
		public Group getGroup() { return cGroup; }

		//pattern=Pattern
		public Assignment getPatternAssignment_0() { return cPatternAssignment_0; }

		//Pattern
		public RuleCall getPatternPatternEnumRuleCall_0_0() { return cPatternPatternEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//variants+=TransactionVariant
		public Assignment getVariantsAssignment_2_1() { return cVariantsAssignment_2_1; }

		//TransactionVariant
		public RuleCall getVariantsTransactionVariantParserRuleCall_2_1_0() { return cVariantsTransactionVariantParserRuleCall_2_1_0; }

		//("," variants+=TransactionVariant)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//variants+=TransactionVariant
		public Assignment getVariantsAssignment_2_2_1() { return cVariantsAssignment_2_2_1; }

		//TransactionVariant
		public RuleCall getVariantsTransactionVariantParserRuleCall_2_2_1_0() { return cVariantsTransactionVariantParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3() { return cGreaterThanSignKeyword_2_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//"send"
		public Keyword getSendKeyword_4() { return cSendKeyword_4; }

		//sendAction=TwoWayAction
		public Assignment getSendActionAssignment_5() { return cSendActionAssignment_5; }

		//TwoWayAction
		public RuleCall getSendActionTwoWayActionParserRuleCall_5_0() { return cSendActionTwoWayActionParserRuleCall_5_0; }

		//"receive"
		public Keyword getReceiveKeyword_6() { return cReceiveKeyword_6; }

		//receiveAction=OneWayAction
		public Assignment getReceiveActionAssignment_7() { return cReceiveActionAssignment_7; }

		//OneWayAction
		public RuleCall getReceiveActionOneWayActionParserRuleCall_7_0() { return cReceiveActionOneWayActionParserRuleCall_7_0; }

		//postconditions=Postconditions?
		public Assignment getPostconditionsAssignment_8() { return cPostconditionsAssignment_8; }

		//Postconditions
		public RuleCall getPostconditionsPostconditionsParserRuleCall_8_0() { return cPostconditionsPostconditionsParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class TwoWayActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoWayAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMessagesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMessagesVariantMessageMappingsParserRuleCall_1_0 = (RuleCall)cMessagesAssignment_1.eContents().get(0);
		private final Assignment cRequiresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRequiresRequiredFeaturesParserRuleCall_2_0 = (RuleCall)cRequiresAssignment_2.eContents().get(0);
		private final Assignment cTimeoutsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTimeoutsTwoWayTimeOutsParserRuleCall_3_0 = (RuleCall)cTimeoutsAssignment_3.eContents().get(0);
		private final Keyword cRetriesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRetriesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRetriesINTTerminalRuleCall_6_0 = (RuleCall)cRetriesAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TwoWayAction:
		//	"{" messages=VariantMessageMappings? requires=RequiredFeatures? timeouts=TwoWayTimeOuts "retries" "=" retries=INT "}";
		public ParserRule getRule() { return rule; }

		//"{" messages=VariantMessageMappings? requires=RequiredFeatures? timeouts=TwoWayTimeOuts "retries" "=" retries=INT "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//messages=VariantMessageMappings?
		public Assignment getMessagesAssignment_1() { return cMessagesAssignment_1; }

		//VariantMessageMappings
		public RuleCall getMessagesVariantMessageMappingsParserRuleCall_1_0() { return cMessagesVariantMessageMappingsParserRuleCall_1_0; }

		//requires=RequiredFeatures?
		public Assignment getRequiresAssignment_2() { return cRequiresAssignment_2; }

		//RequiredFeatures
		public RuleCall getRequiresRequiredFeaturesParserRuleCall_2_0() { return cRequiresRequiredFeaturesParserRuleCall_2_0; }

		//timeouts=TwoWayTimeOuts
		public Assignment getTimeoutsAssignment_3() { return cTimeoutsAssignment_3; }

		//TwoWayTimeOuts
		public RuleCall getTimeoutsTwoWayTimeOutsParserRuleCall_3_0() { return cTimeoutsTwoWayTimeOutsParserRuleCall_3_0; }

		//"retries"
		public Keyword getRetriesKeyword_4() { return cRetriesKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//retries=INT
		public Assignment getRetriesAssignment_6() { return cRetriesAssignment_6; }

		//INT
		public RuleCall getRetriesINTTerminalRuleCall_6_0() { return cRetriesINTTerminalRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TwoWayTimeOutsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoWayTimeOuts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeoutsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutsTwoWayTimeOutParserRuleCall_2_0 = (RuleCall)cTimeoutsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cGroup_3.eContents().get(0);
		private final Keyword cCommaKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTimeoutsAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTimeoutsTwoWayTimeOutParserRuleCall_3_0_1_0 = (RuleCall)cTimeoutsAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cTimeoutsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cTimeoutsTwoWayTimeOutParserRuleCall_3_1_1_0 = (RuleCall)cTimeoutsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TwoWayTimeOuts:
		//	"timeouts" "(" timeouts+=TwoWayTimeOut (("," timeouts+=TwoWayTimeOut) ("," timeouts+=TwoWayTimeOut)?)? ")";
		public ParserRule getRule() { return rule; }

		//"timeouts" "(" timeouts+=TwoWayTimeOut (("," timeouts+=TwoWayTimeOut) ("," timeouts+=TwoWayTimeOut)?)? ")"
		public Group getGroup() { return cGroup; }

		//"timeouts"
		public Keyword getTimeoutsKeyword_0() { return cTimeoutsKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//timeouts+=TwoWayTimeOut
		public Assignment getTimeoutsAssignment_2() { return cTimeoutsAssignment_2; }

		//TwoWayTimeOut
		public RuleCall getTimeoutsTwoWayTimeOutParserRuleCall_2_0() { return cTimeoutsTwoWayTimeOutParserRuleCall_2_0; }

		//(("," timeouts+=TwoWayTimeOut) ("," timeouts+=TwoWayTimeOut)?)?
		public Group getGroup_3() { return cGroup_3; }

		//"," timeouts+=TwoWayTimeOut
		public Group getGroup_3_0() { return cGroup_3_0; }

		//","
		public Keyword getCommaKeyword_3_0_0() { return cCommaKeyword_3_0_0; }

		//timeouts+=TwoWayTimeOut
		public Assignment getTimeoutsAssignment_3_0_1() { return cTimeoutsAssignment_3_0_1; }

		//TwoWayTimeOut
		public RuleCall getTimeoutsTwoWayTimeOutParserRuleCall_3_0_1_0() { return cTimeoutsTwoWayTimeOutParserRuleCall_3_0_1_0; }

		//("," timeouts+=TwoWayTimeOut)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//timeouts+=TwoWayTimeOut
		public Assignment getTimeoutsAssignment_3_1_1() { return cTimeoutsAssignment_3_1_1; }

		//TwoWayTimeOut
		public RuleCall getTimeoutsTwoWayTimeOutParserRuleCall_3_1_1_0() { return cTimeoutsTwoWayTimeOutParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TwoWayTimeOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TwoWayTimeOut");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOneWayTimeOutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cResponseTimeOutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TwoWayTimeOut:
		//	OneWayTimeOut | ResponseTimeOut;
		public ParserRule getRule() { return rule; }

		//OneWayTimeOut | ResponseTimeOut
		public Alternatives getAlternatives() { return cAlternatives; }

		//OneWayTimeOut
		public RuleCall getOneWayTimeOutParserRuleCall_0() { return cOneWayTimeOutParserRuleCall_0; }

		//ResponseTimeOut
		public RuleCall getResponseTimeOutParserRuleCall_1() { return cResponseTimeOutParserRuleCall_1; }
	}

	public class ResponseTimeOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResponseTimeOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResponseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTimeoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeoutTimeOutParserRuleCall_2_0 = (RuleCall)cTimeoutAssignment_2.eContents().get(0);
		
		//ResponseTimeOut:
		//	"response" "=" timeout=TimeOut;
		public ParserRule getRule() { return rule; }

		//"response" "=" timeout=TimeOut
		public Group getGroup() { return cGroup; }

		//"response"
		public Keyword getResponseKeyword_0() { return cResponseKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//timeout=TimeOut
		public Assignment getTimeoutAssignment_2() { return cTimeoutAssignment_2; }

		//TimeOut
		public RuleCall getTimeoutTimeOutParserRuleCall_2_0() { return cTimeoutTimeOutParserRuleCall_2_0; }
	}

	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Protocol");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProtocolReferenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProtocolDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Protocol:
		//	ProtocolReference | ProtocolDeclaration;
		public ParserRule getRule() { return rule; }

		//ProtocolReference | ProtocolDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//ProtocolReference
		public RuleCall getProtocolReferenceParserRuleCall_0() { return cProtocolReferenceParserRuleCall_0; }

		//ProtocolDeclaration
		public RuleCall getProtocolDeclarationParserRuleCall_1() { return cProtocolDeclarationParserRuleCall_1; }
	}

	public class ProtocolReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProtocolReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameProtocolNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ProtocolReference:
		//	"protocol" name=ProtocolName;
		public ParserRule getRule() { return rule; }

		//"protocol" name=ProtocolName
		public Group getGroup() { return cGroup; }

		//"protocol"
		public Keyword getProtocolKeyword_0() { return cProtocolKeyword_0; }

		//name=ProtocolName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ProtocolName
		public RuleCall getNameProtocolNameParserRuleCall_1_0() { return cNameProtocolNameParserRuleCall_1_0; }
	}

	public class ProtocolNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProtocolName");
		private final RuleCall cQualifiedNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ProtocolName:
		//	QualifiedName;
		public ParserRule getRule() { return rule; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall() { return cQualifiedNameParserRuleCall; }
	}

	public class ProtocolDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProtocolDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProtocolKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameProtocolNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMessageKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMessagesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMessagesMessageNameParserRuleCall_3_1_0 = (RuleCall)cMessagesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ProtocolDeclaration:
		//	"protocol" name=ProtocolName "{" ("message" messages+=MessageName)+ "}";
		public ParserRule getRule() { return rule; }

		//"protocol" name=ProtocolName "{" ("message" messages+=MessageName)+ "}"
		public Group getGroup() { return cGroup; }

		//"protocol"
		public Keyword getProtocolKeyword_0() { return cProtocolKeyword_0; }

		//name=ProtocolName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ProtocolName
		public RuleCall getNameProtocolNameParserRuleCall_1_0() { return cNameProtocolNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("message" messages+=MessageName)+
		public Group getGroup_3() { return cGroup_3; }

		//"message"
		public Keyword getMessageKeyword_3_0() { return cMessageKeyword_3_0; }

		//messages+=MessageName
		public Assignment getMessagesAssignment_3_1() { return cMessagesAssignment_3_1; }

		//MessageName
		public RuleCall getMessagesMessageNameParserRuleCall_3_1_0() { return cMessagesMessageNameParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	public class TimeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TimeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSSKeyword_0_0 = (Keyword)cSECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTESMKeyword_1_0 = (Keyword)cMINUTESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURSHKeyword_2_0 = (Keyword)cHOURSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYSDKeyword_3_0 = (Keyword)cDAYSEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TimeUnit:
		//	SECONDS="s" | MINUTES="m" | HOURS="h" | DAYS="d";
		public EnumRule getRule() { return rule; }

		//SECONDS="s" | MINUTES="m" | HOURS="h" | DAYS="d"
		public Alternatives getAlternatives() { return cAlternatives; }

		//SECONDS="s"
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_0() { return cSECONDSEnumLiteralDeclaration_0; }

		//"s"
		public Keyword getSECONDSSKeyword_0_0() { return cSECONDSSKeyword_0_0; }

		//MINUTES="m"
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_1() { return cMINUTESEnumLiteralDeclaration_1; }

		//"m"
		public Keyword getMINUTESMKeyword_1_0() { return cMINUTESMKeyword_1_0; }

		//HOURS="h"
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_2() { return cHOURSEnumLiteralDeclaration_2; }

		//"h"
		public Keyword getHOURSHKeyword_2_0() { return cHOURSHKeyword_2_0; }

		//DAYS="d"
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_3() { return cDAYSEnumLiteralDeclaration_3; }

		//"d"
		public Keyword getDAYSDKeyword_3_0() { return cDAYSDKeyword_3_0; }
	}

	public class PatternElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Pattern");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cResponseEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cResponseResponseKeyword_0_0 = (Keyword)cResponseEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConfirmEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConfirmConfirmKeyword_1_0 = (Keyword)cConfirmEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cQueryEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cQueryQueryKeyword_2_0 = (Keyword)cQueryEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cObligationEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cObligationObligationKeyword_3_0 = (Keyword)cObligationEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Pattern:
		//	Response="response" | Confirm="confirm" | Query="query" | Obligation="obligation";
		public EnumRule getRule() { return rule; }

		//Response="response" | Confirm="confirm" | Query="query" | Obligation="obligation"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Response="response"
		public EnumLiteralDeclaration getResponseEnumLiteralDeclaration_0() { return cResponseEnumLiteralDeclaration_0; }

		//"response"
		public Keyword getResponseResponseKeyword_0_0() { return cResponseResponseKeyword_0_0; }

		//Confirm="confirm"
		public EnumLiteralDeclaration getConfirmEnumLiteralDeclaration_1() { return cConfirmEnumLiteralDeclaration_1; }

		//"confirm"
		public Keyword getConfirmConfirmKeyword_1_0() { return cConfirmConfirmKeyword_1_0; }

		//Query="query"
		public EnumLiteralDeclaration getQueryEnumLiteralDeclaration_2() { return cQueryEnumLiteralDeclaration_2; }

		//"query"
		public Keyword getQueryQueryKeyword_2_0() { return cQueryQueryKeyword_2_0; }

		//Obligation="obligation"
		public EnumLiteralDeclaration getObligationEnumLiteralDeclaration_3() { return cObligationEnumLiteralDeclaration_3; }

		//"obligation"
		public Keyword getObligationObligationKeyword_3_0() { return cObligationObligationKeyword_3_0; }
	}
	
	private DomainmodelElements pDomainmodel;
	private TopLevelElementElements pTopLevelElement;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private PackageNameElements pPackageName;
	private QualifiedNameElements pQualifiedName;
	private PackageElements pPackage;
	private VersionStringElements pVersionString;
	private TwoPartVersionStringElements pTwoPartVersionString;
	private FourPartVersionStringElements pFourPartVersionString;
	private PackageElementElements pPackageElement;
	private PartnerElements pPartner;
	private ProcessElements pProcess;
	private ProcessRoleElements pProcessRole;
	private RoleElements pRole;
	private PreconditionsElements pPreconditions;
	private EntityElements pEntity;
	private EntityStateElements pEntityState;
	private EntityStateTransitionElements pEntityStateTransition;
	private PostconditionsElements pPostconditions;
	private OnProcessResultElements pOnProcessResult;
	private OnProcessSuccessElements pOnProcessSuccess;
	private OnProcessFailureElements pOnProcessFailure;
	private WorkflowElements pWorkflow;
	private WorkflowVariantElements pWorkflowVariant;
	private WorkflowRolesElements pWorkflowRoles;
	private RoleDeclarationsElements pRoleDeclarations;
	private WorkflowRoleElements pWorkflowRole;
	private ProcessReferenceElements pProcessReference;
	private WorkflowBlockElements pWorkflowBlock;
	private EndPointElements pEndPoint;
	private WorkflowElementElements pWorkflowElement;
	private WorkflowBranchElements pWorkflowBranch;
	private BranchConditionElements pBranchCondition;
	private BooleanExpressionElements pBooleanExpression;
	private WorkflowActionElements pWorkflowAction;
	private TransactionCallElements pTransactionCall;
	private TransactionVariantMappingElements pTransactionVariantMapping;
	private SenderRoleMappingElements pSenderRoleMapping;
	private ReceiverRoleMappingElements pReceiverRoleMapping;
	private WorkflowCallElements pWorkflowCall;
	private WorkflowVariantMappingElements pWorkflowVariantMapping;
	private WorkflowRoleMappingElements pWorkflowRoleMapping;
	private WorkflowRoleReferenceElements pWorkflowRoleReference;
	private TransactionElements pTransaction;
	private InformTransactionElements pInformTransaction;
	private TransactionVariantElements pTransactionVariant;
	private DatagramActionElements pDatagramAction;
	private VariantMessageMappingsElements pVariantMessageMappings;
	private VariantMessageMappingElements pVariantMessageMapping;
	private MessageMappingElements pMessageMapping;
	private MessageNameElements pMessageName;
	private RequiredFeaturesElements pRequiredFeatures;
	private RequiredFeatureElements pRequiredFeature;
	private AuthorizationFeatureElements pAuthorizationFeature;
	private NonRepudiationFeatureElements pNonRepudiationFeature;
	private NotifyTransactionElements pNotifyTransaction;
	private OneWayActionElements pOneWayAction;
	private OneWayTimeOutsElements pOneWayTimeOuts;
	private OneWayTimeOutElements pOneWayTimeOut;
	private ReceiptAckTimeOutElements pReceiptAckTimeOut;
	private TimeOutElements pTimeOut;
	private TimeUnitElements unknownRuleTimeUnit;
	private ValidationAckTimeOutElements pValidationAckTimeOut;
	private PatternElements unknownRulePattern;
	private RequestTransactionElements pRequestTransaction;
	private TwoWayActionElements pTwoWayAction;
	private TwoWayTimeOutsElements pTwoWayTimeOuts;
	private TwoWayTimeOutElements pTwoWayTimeOut;
	private ResponseTimeOutElements pResponseTimeOut;
	private ProtocolElements pProtocol;
	private ProtocolReferenceElements pProtocolReference;
	private ProtocolNameElements pProtocolName;
	private ProtocolDeclarationElements pProtocolDeclaration;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XOCLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Domainmodel:
	//	elements+=TopLevelElement*;
	public DomainmodelElements getDomainmodelAccess() {
		return (pDomainmodel != null) ? pDomainmodel : (pDomainmodel = new DomainmodelElements());
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}

	//TopLevelElement:
	//	Import | Package;
	public TopLevelElementElements getTopLevelElementAccess() {
		return (pTopLevelElement != null) ? pTopLevelElement : (pTopLevelElement = new TopLevelElementElements());
	}
	
	public ParserRule getTopLevelElementRule() {
		return getTopLevelElementAccess().getRule();
	}

	//Import:
	//	"import" package=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	PackageName ".*"?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//PackageName:
	//	QualifiedName;
	public PackageNameElements getPackageNameAccess() {
		return (pPackageName != null) ? pPackageName : (pPackageName = new PackageNameElements());
	}
	
	public ParserRule getPackageNameRule() {
		return getPackageNameAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Package:
	//	"package" name=PackageName version=VersionString? "{" elements+=PackageElement+ "}";
	public PackageElements getPackageAccess() {
		return (pPackage != null) ? pPackage : (pPackage = new PackageElements());
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//VersionString:
	//	TwoPartVersionString | FourPartVersionString;
	public VersionStringElements getVersionStringAccess() {
		return (pVersionString != null) ? pVersionString : (pVersionString = new VersionStringElements());
	}
	
	public ParserRule getVersionStringRule() {
		return getVersionStringAccess().getRule();
	}

	//TwoPartVersionString:
	//	major=INT "." minor=INT;
	public TwoPartVersionStringElements getTwoPartVersionStringAccess() {
		return (pTwoPartVersionString != null) ? pTwoPartVersionString : (pTwoPartVersionString = new TwoPartVersionStringElements());
	}
	
	public ParserRule getTwoPartVersionStringRule() {
		return getTwoPartVersionStringAccess().getRule();
	}

	//FourPartVersionString:
	//	TwoPartVersionString release="." INT build="." INT;
	public FourPartVersionStringElements getFourPartVersionStringAccess() {
		return (pFourPartVersionString != null) ? pFourPartVersionString : (pFourPartVersionString = new FourPartVersionStringElements());
	}
	
	public ParserRule getFourPartVersionStringRule() {
		return getFourPartVersionStringAccess().getRule();
	}

	//PackageElement:
	//	Partner | Process | Entity | Workflow | Transaction | Protocol;
	public PackageElementElements getPackageElementAccess() {
		return (pPackageElement != null) ? pPackageElement : (pPackageElement = new PackageElementElements());
	}
	
	public ParserRule getPackageElementRule() {
		return getPackageElementAccess().getRule();
	}

	//Partner:
	//	"partner" name=ID "{" "responsibilities" "(" responsibilities+=[ProcessRole|QualifiedName] (","
	//	responsibilities+=[ProcessRole|QualifiedName])* ")" "}";
	public PartnerElements getPartnerAccess() {
		return (pPartner != null) ? pPartner : (pPartner = new PartnerElements());
	}
	
	public ParserRule getPartnerRule() {
		return getPartnerAccess().getRule();
	}

	//Process:
	//	"process" name=ID "(" roles+=ProcessRole ("," roles+=ProcessRole)+ ")" "{" "description" description=STRING
	//	preconditions=Preconditions? postconditions=Postconditions? "}";
	public ProcessElements getProcessAccess() {
		return (pProcess != null) ? pProcess : (pProcess = new ProcessElements());
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}

	//ProcessRole:
	//	Role;
	public ProcessRoleElements getProcessRoleAccess() {
		return (pProcessRole != null) ? pProcessRole : (pProcessRole = new ProcessRoleElements());
	}
	
	public ParserRule getProcessRoleRule() {
		return getProcessRoleAccess().getRule();
	}

	//Role:
	//	name=ID;
	public RoleElements getRoleAccess() {
		return (pRole != null) ? pRole : (pRole = new RoleElements());
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}

	//Preconditions:
	//	"preconditions" "(" conditions+=[EntityState|QualifiedName] ("," conditions+=[EntityState|QualifiedName])* ")";
	public PreconditionsElements getPreconditionsAccess() {
		return (pPreconditions != null) ? pPreconditions : (pPreconditions = new PreconditionsElements());
	}
	
	public ParserRule getPreconditionsRule() {
		return getPreconditionsAccess().getRule();
	}

	//Entity:
	//	"entity" name=ID "{" states+=EntityState+ "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//EntityState:
	//	"state" name=ID ("[" transitions+=EntityStateTransition ("," transitions+=EntityStateTransition)* "]")?;
	public EntityStateElements getEntityStateAccess() {
		return (pEntityState != null) ? pEntityState : (pEntityState = new EntityStateElements());
	}
	
	public ParserRule getEntityStateRule() {
		return getEntityStateAccess().getRule();
	}

	//EntityStateTransition:
	//	successor=[EntityState];
	public EntityStateTransitionElements getEntityStateTransitionAccess() {
		return (pEntityStateTransition != null) ? pEntityStateTransition : (pEntityStateTransition = new EntityStateTransitionElements());
	}
	
	public ParserRule getEntityStateTransitionRule() {
		return getEntityStateTransitionAccess().getRule();
	}

	//Postconditions:
	//	"postconditions" {Postconditions} "{" success=OnProcessSuccess? failure=OnProcessFailure? "}";
	public PostconditionsElements getPostconditionsAccess() {
		return (pPostconditions != null) ? pPostconditions : (pPostconditions = new PostconditionsElements());
	}
	
	public ParserRule getPostconditionsRule() {
		return getPostconditionsAccess().getRule();
	}

	//OnProcessResult:
	//	OnProcessSuccess | OnProcessFailure;
	public OnProcessResultElements getOnProcessResultAccess() {
		return (pOnProcessResult != null) ? pOnProcessResult : (pOnProcessResult = new OnProcessResultElements());
	}
	
	public ParserRule getOnProcessResultRule() {
		return getOnProcessResultAccess().getRule();
	}

	//OnProcessSuccess:
	//	"success" "[" results+=[EntityState|QualifiedName] ("," results+=[EntityState|QualifiedName])* "]";
	public OnProcessSuccessElements getOnProcessSuccessAccess() {
		return (pOnProcessSuccess != null) ? pOnProcessSuccess : (pOnProcessSuccess = new OnProcessSuccessElements());
	}
	
	public ParserRule getOnProcessSuccessRule() {
		return getOnProcessSuccessAccess().getRule();
	}

	//OnProcessFailure:
	//	"failure" "[" results+=[EntityState|QualifiedName] ("," results+=[EntityState|QualifiedName])* "]";
	public OnProcessFailureElements getOnProcessFailureAccess() {
		return (pOnProcessFailure != null) ? pOnProcessFailure : (pOnProcessFailure = new OnProcessFailureElements());
	}
	
	public ParserRule getOnProcessFailureRule() {
		return getOnProcessFailureAccess().getRule();
	}

	//Workflow:
	//	"workflow" name=ID ("<" variants+=WorkflowVariant ("," variants+=WorkflowVariant)* ">")? roles=WorkflowRoles
	//	contents=WorkflowBlock;
	public WorkflowElements getWorkflowAccess() {
		return (pWorkflow != null) ? pWorkflow : (pWorkflow = new WorkflowElements());
	}
	
	public ParserRule getWorkflowRule() {
		return getWorkflowAccess().getRule();
	}

	//WorkflowVariant:
	//	name=ID;
	public WorkflowVariantElements getWorkflowVariantAccess() {
		return (pWorkflowVariant != null) ? pWorkflowVariant : (pWorkflowVariant = new WorkflowVariantElements());
	}
	
	public ParserRule getWorkflowVariantRule() {
		return getWorkflowVariantAccess().getRule();
	}

	//WorkflowRoles:
	//	RoleDeclarations | ProcessReference;
	public WorkflowRolesElements getWorkflowRolesAccess() {
		return (pWorkflowRoles != null) ? pWorkflowRoles : (pWorkflowRoles = new WorkflowRolesElements());
	}
	
	public ParserRule getWorkflowRolesRule() {
		return getWorkflowRolesAccess().getRule();
	}

	//RoleDeclarations:
	//	"(" roles+=WorkflowRole ("," roles+=WorkflowRole)+ ")";
	public RoleDeclarationsElements getRoleDeclarationsAccess() {
		return (pRoleDeclarations != null) ? pRoleDeclarations : (pRoleDeclarations = new RoleDeclarationsElements());
	}
	
	public ParserRule getRoleDeclarationsRule() {
		return getRoleDeclarationsAccess().getRule();
	}

	//WorkflowRole:
	//	Role;
	public WorkflowRoleElements getWorkflowRoleAccess() {
		return (pWorkflowRole != null) ? pWorkflowRole : (pWorkflowRole = new WorkflowRoleElements());
	}
	
	public ParserRule getWorkflowRoleRule() {
		return getWorkflowRoleAccess().getRule();
	}

	//ProcessReference:
	//	"implements" implements=[Process|QualifiedName];
	public ProcessReferenceElements getProcessReferenceAccess() {
		return (pProcessReference != null) ? pProcessReference : (pProcessReference = new ProcessReferenceElements());
	}
	
	public ParserRule getProcessReferenceRule() {
		return getProcessReferenceAccess().getRule();
	}

	//WorkflowBlock:
	//	"{" elements+=WorkflowElement* elements+=EndPoint "}";
	public WorkflowBlockElements getWorkflowBlockAccess() {
		return (pWorkflowBlock != null) ? pWorkflowBlock : (pWorkflowBlock = new WorkflowBlockElements());
	}
	
	public ParserRule getWorkflowBlockRule() {
		return getWorkflowBlockAccess().getRule();
	}

	//EndPoint:
	//	name="success" | name="failure";
	public EndPointElements getEndPointAccess() {
		return (pEndPoint != null) ? pEndPoint : (pEndPoint = new EndPointElements());
	}
	
	public ParserRule getEndPointRule() {
		return getEndPointAccess().getRule();
	}

	//WorkflowElement:
	//	WorkflowBranch | WorkflowAction;
	public WorkflowElementElements getWorkflowElementAccess() {
		return (pWorkflowElement != null) ? pWorkflowElement : (pWorkflowElement = new WorkflowElementElements());
	}
	
	public ParserRule getWorkflowElementRule() {
		return getWorkflowElementAccess().getRule();
	}

	//WorkflowBranch:
	//	"branch" "{" conditions+=BranchCondition+ "}";
	public WorkflowBranchElements getWorkflowBranchAccess() {
		return (pWorkflowBranch != null) ? pWorkflowBranch : (pWorkflowBranch = new WorkflowBranchElements());
	}
	
	public ParserRule getWorkflowBranchRule() {
		return getWorkflowBranchAccess().getRule();
	}

	//BranchCondition:
	//	"condition" "(" BooleanExpression ")" contents=WorkflowBlock;
	public BranchConditionElements getBranchConditionAccess() {
		return (pBranchCondition != null) ? pBranchCondition : (pBranchCondition = new BranchConditionElements());
	}
	
	public ParserRule getBranchConditionRule() {
		return getBranchConditionAccess().getRule();
	}

	//BooleanExpression:
	//	STRING;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//WorkflowAction:
	//	TransactionCall | WorkflowCall;
	public WorkflowActionElements getWorkflowActionAccess() {
		return (pWorkflowAction != null) ? pWorkflowAction : (pWorkflowAction = new WorkflowActionElements());
	}
	
	public ParserRule getWorkflowActionRule() {
		return getWorkflowActionAccess().getRule();
	}

	//TransactionCall:
	//	"transaction" name=[Transaction|QualifiedName] ("<" variants+=TransactionVariantMapping (","
	//	variants+=TransactionVariantMapping)* ">")? "(" sender=SenderRoleMapping "," receiver=ReceiverRoleMapping ")";
	public TransactionCallElements getTransactionCallAccess() {
		return (pTransactionCall != null) ? pTransactionCall : (pTransactionCall = new TransactionCallElements());
	}
	
	public ParserRule getTransactionCallRule() {
		return getTransactionCallAccess().getRule();
	}

	//TransactionVariantMapping:
	//	parameter=[TransactionVariant|QualifiedName] "=" value=[WorkflowVariant];
	public TransactionVariantMappingElements getTransactionVariantMappingAccess() {
		return (pTransactionVariantMapping != null) ? pTransactionVariantMapping : (pTransactionVariantMapping = new TransactionVariantMappingElements());
	}
	
	public ParserRule getTransactionVariantMappingRule() {
		return getTransactionVariantMappingAccess().getRule();
	}

	//SenderRoleMapping:
	//	parameter="sender" "=" value=[WorkflowRole];
	public SenderRoleMappingElements getSenderRoleMappingAccess() {
		return (pSenderRoleMapping != null) ? pSenderRoleMapping : (pSenderRoleMapping = new SenderRoleMappingElements());
	}
	
	public ParserRule getSenderRoleMappingRule() {
		return getSenderRoleMappingAccess().getRule();
	}

	//ReceiverRoleMapping:
	//	parameter="receiver" "=" value=[WorkflowRole];
	public ReceiverRoleMappingElements getReceiverRoleMappingAccess() {
		return (pReceiverRoleMapping != null) ? pReceiverRoleMapping : (pReceiverRoleMapping = new ReceiverRoleMappingElements());
	}
	
	public ParserRule getReceiverRoleMappingRule() {
		return getReceiverRoleMappingAccess().getRule();
	}

	//WorkflowCall:
	//	"workflow" name=[Workflow|QualifiedName] ("<" variants+=WorkflowVariantMapping ("," variants+=WorkflowVariantMapping)*
	//	">")? "(" roles+=WorkflowRoleMapping ("," roles+=WorkflowRoleMapping)+ ")";
	public WorkflowCallElements getWorkflowCallAccess() {
		return (pWorkflowCall != null) ? pWorkflowCall : (pWorkflowCall = new WorkflowCallElements());
	}
	
	public ParserRule getWorkflowCallRule() {
		return getWorkflowCallAccess().getRule();
	}

	//WorkflowVariantMapping:
	//	parameter=[WorkflowVariant|QualifiedName] "=" value=[WorkflowVariant];
	public WorkflowVariantMappingElements getWorkflowVariantMappingAccess() {
		return (pWorkflowVariantMapping != null) ? pWorkflowVariantMapping : (pWorkflowVariantMapping = new WorkflowVariantMappingElements());
	}
	
	public ParserRule getWorkflowVariantMappingRule() {
		return getWorkflowVariantMappingAccess().getRule();
	}

	//WorkflowRoleMapping:
	//	parameter=[WorkflowRole|QualifiedName] "=" value=[WorkflowRoleReference|QualifiedName];
	public WorkflowRoleMappingElements getWorkflowRoleMappingAccess() {
		return (pWorkflowRoleMapping != null) ? pWorkflowRoleMapping : (pWorkflowRoleMapping = new WorkflowRoleMappingElements());
	}
	
	public ParserRule getWorkflowRoleMappingRule() {
		return getWorkflowRoleMappingAccess().getRule();
	}

	//WorkflowRoleReference:
	//	ProcessRole | WorkflowRole;
	public WorkflowRoleReferenceElements getWorkflowRoleReferenceAccess() {
		return (pWorkflowRoleReference != null) ? pWorkflowRoleReference : (pWorkflowRoleReference = new WorkflowRoleReferenceElements());
	}
	
	public ParserRule getWorkflowRoleReferenceRule() {
		return getWorkflowRoleReferenceAccess().getRule();
	}

	//Transaction:
	//	InformTransaction | NotifyTransaction | RequestTransaction;
	public TransactionElements getTransactionAccess() {
		return (pTransaction != null) ? pTransaction : (pTransaction = new TransactionElements());
	}
	
	public ParserRule getTransactionRule() {
		return getTransactionAccess().getRule();
	}

	//InformTransaction:
	//	pattern="inform" name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
	//	sendAction=DatagramAction postconditions=Postconditions? "}";
	public InformTransactionElements getInformTransactionAccess() {
		return (pInformTransaction != null) ? pInformTransaction : (pInformTransaction = new InformTransactionElements());
	}
	
	public ParserRule getInformTransactionRule() {
		return getInformTransactionAccess().getRule();
	}

	//TransactionVariant:
	//	name=ID;
	public TransactionVariantElements getTransactionVariantAccess() {
		return (pTransactionVariant != null) ? pTransactionVariant : (pTransactionVariant = new TransactionVariantElements());
	}
	
	public ParserRule getTransactionVariantRule() {
		return getTransactionVariantAccess().getRule();
	}

	//DatagramAction:
	//	{DatagramAction} "{" messages=VariantMessageMappings? requires=RequiredFeatures? "}";
	public DatagramActionElements getDatagramActionAccess() {
		return (pDatagramAction != null) ? pDatagramAction : (pDatagramAction = new DatagramActionElements());
	}
	
	public ParserRule getDatagramActionRule() {
		return getDatagramActionAccess().getRule();
	}

	//VariantMessageMappings:
	//	"messages" "{" variants+=VariantMessageMapping ("," variants+=VariantMessageMapping)* "}";
	public VariantMessageMappingsElements getVariantMessageMappingsAccess() {
		return (pVariantMessageMappings != null) ? pVariantMessageMappings : (pVariantMessageMappings = new VariantMessageMappingsElements());
	}
	
	public ParserRule getVariantMessageMappingsRule() {
		return getVariantMessageMappingsAccess().getRule();
	}

	//VariantMessageMapping:
	//	variant=[TransactionVariant] "<" mappings+=MessageMapping ("," mappings+=MessageMapping)* ">";
	public VariantMessageMappingElements getVariantMessageMappingAccess() {
		return (pVariantMessageMapping != null) ? pVariantMessageMapping : (pVariantMessageMapping = new VariantMessageMappingElements());
	}
	
	public ParserRule getVariantMessageMappingRule() {
		return getVariantMessageMappingAccess().getRule();
	}

	//MessageMapping:
	//	parameter=MessageName "=" value=MessageName;
	public MessageMappingElements getMessageMappingAccess() {
		return (pMessageMapping != null) ? pMessageMapping : (pMessageMapping = new MessageMappingElements());
	}
	
	public ParserRule getMessageMappingRule() {
		return getMessageMappingAccess().getRule();
	}

	//MessageName:
	//	QualifiedName;
	public MessageNameElements getMessageNameAccess() {
		return (pMessageName != null) ? pMessageName : (pMessageName = new MessageNameElements());
	}
	
	public ParserRule getMessageNameRule() {
		return getMessageNameAccess().getRule();
	}

	//RequiredFeatures:
	//	"requires" "(" features+=RequiredFeature ("," features+=RequiredFeature)? ")";
	public RequiredFeaturesElements getRequiredFeaturesAccess() {
		return (pRequiredFeatures != null) ? pRequiredFeatures : (pRequiredFeatures = new RequiredFeaturesElements());
	}
	
	public ParserRule getRequiredFeaturesRule() {
		return getRequiredFeaturesAccess().getRule();
	}

	//RequiredFeature:
	//	AuthorizationFeature | NonRepudiationFeature;
	public RequiredFeatureElements getRequiredFeatureAccess() {
		return (pRequiredFeature != null) ? pRequiredFeature : (pRequiredFeature = new RequiredFeatureElements());
	}
	
	public ParserRule getRequiredFeatureRule() {
		return getRequiredFeatureAccess().getRule();
	}

	//AuthorizationFeature:
	//	authorization?="authorization";
	public AuthorizationFeatureElements getAuthorizationFeatureAccess() {
		return (pAuthorizationFeature != null) ? pAuthorizationFeature : (pAuthorizationFeature = new AuthorizationFeatureElements());
	}
	
	public ParserRule getAuthorizationFeatureRule() {
		return getAuthorizationFeatureAccess().getRule();
	}

	//NonRepudiationFeature:
	//	nonrepudiation?="nonrepudiation";
	public NonRepudiationFeatureElements getNonRepudiationFeatureAccess() {
		return (pNonRepudiationFeature != null) ? pNonRepudiationFeature : (pNonRepudiationFeature = new NonRepudiationFeatureElements());
	}
	
	public ParserRule getNonRepudiationFeatureRule() {
		return getNonRepudiationFeatureAccess().getRule();
	}

	//NotifyTransaction:
	//	pattern="notify" name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
	//	sendAction=OneWayAction postconditions=Postconditions? "}";
	public NotifyTransactionElements getNotifyTransactionAccess() {
		return (pNotifyTransaction != null) ? pNotifyTransaction : (pNotifyTransaction = new NotifyTransactionElements());
	}
	
	public ParserRule getNotifyTransactionRule() {
		return getNotifyTransactionAccess().getRule();
	}

	//OneWayAction:
	//	"{" messages=VariantMessageMappings? requires=RequiredFeatures? timeouts=OneWayTimeOuts "retries" "=" retries=INT "}";
	public OneWayActionElements getOneWayActionAccess() {
		return (pOneWayAction != null) ? pOneWayAction : (pOneWayAction = new OneWayActionElements());
	}
	
	public ParserRule getOneWayActionRule() {
		return getOneWayActionAccess().getRule();
	}

	//OneWayTimeOuts:
	//	"timeouts" "(" timeouts+=OneWayTimeOut ("," timeouts+=OneWayTimeOut)? ")";
	public OneWayTimeOutsElements getOneWayTimeOutsAccess() {
		return (pOneWayTimeOuts != null) ? pOneWayTimeOuts : (pOneWayTimeOuts = new OneWayTimeOutsElements());
	}
	
	public ParserRule getOneWayTimeOutsRule() {
		return getOneWayTimeOutsAccess().getRule();
	}

	//OneWayTimeOut:
	//	ReceiptAckTimeOut | ValidationAckTimeOut;
	public OneWayTimeOutElements getOneWayTimeOutAccess() {
		return (pOneWayTimeOut != null) ? pOneWayTimeOut : (pOneWayTimeOut = new OneWayTimeOutElements());
	}
	
	public ParserRule getOneWayTimeOutRule() {
		return getOneWayTimeOutAccess().getRule();
	}

	//ReceiptAckTimeOut:
	//	"receipt" "=" timeout=TimeOut;
	public ReceiptAckTimeOutElements getReceiptAckTimeOutAccess() {
		return (pReceiptAckTimeOut != null) ? pReceiptAckTimeOut : (pReceiptAckTimeOut = new ReceiptAckTimeOutElements());
	}
	
	public ParserRule getReceiptAckTimeOutRule() {
		return getReceiptAckTimeOutAccess().getRule();
	}

	//TimeOut:
	//	value=INT unit=TimeUnit;
	public TimeOutElements getTimeOutAccess() {
		return (pTimeOut != null) ? pTimeOut : (pTimeOut = new TimeOutElements());
	}
	
	public ParserRule getTimeOutRule() {
		return getTimeOutAccess().getRule();
	}

	//enum TimeUnit:
	//	SECONDS="s" | MINUTES="m" | HOURS="h" | DAYS="d";
	public TimeUnitElements getTimeUnitAccess() {
		return (unknownRuleTimeUnit != null) ? unknownRuleTimeUnit : (unknownRuleTimeUnit = new TimeUnitElements());
	}
	
	public EnumRule getTimeUnitRule() {
		return getTimeUnitAccess().getRule();
	}

	//ValidationAckTimeOut:
	//	"validation" "=" timeout=TimeOut;
	public ValidationAckTimeOutElements getValidationAckTimeOutAccess() {
		return (pValidationAckTimeOut != null) ? pValidationAckTimeOut : (pValidationAckTimeOut = new ValidationAckTimeOutElements());
	}
	
	public ParserRule getValidationAckTimeOutRule() {
		return getValidationAckTimeOutAccess().getRule();
	}

	//enum Pattern:
	//	Response="response" | Confirm="confirm" | Query="query" | Obligation="obligation";
	public PatternElements getPatternAccess() {
		return (unknownRulePattern != null) ? unknownRulePattern : (unknownRulePattern = new PatternElements());
	}
	
	public EnumRule getPatternRule() {
		return getPatternAccess().getRule();
	}

	//RequestTransaction:
	//	pattern=Pattern name=ID ("<" variants+=TransactionVariant ("," variants+=TransactionVariant)* ">")? "{" "send"
	//	sendAction=TwoWayAction "receive" receiveAction=OneWayAction postconditions=Postconditions? "}";
	public RequestTransactionElements getRequestTransactionAccess() {
		return (pRequestTransaction != null) ? pRequestTransaction : (pRequestTransaction = new RequestTransactionElements());
	}
	
	public ParserRule getRequestTransactionRule() {
		return getRequestTransactionAccess().getRule();
	}

	//TwoWayAction:
	//	"{" messages=VariantMessageMappings? requires=RequiredFeatures? timeouts=TwoWayTimeOuts "retries" "=" retries=INT "}";
	public TwoWayActionElements getTwoWayActionAccess() {
		return (pTwoWayAction != null) ? pTwoWayAction : (pTwoWayAction = new TwoWayActionElements());
	}
	
	public ParserRule getTwoWayActionRule() {
		return getTwoWayActionAccess().getRule();
	}

	//TwoWayTimeOuts:
	//	"timeouts" "(" timeouts+=TwoWayTimeOut (("," timeouts+=TwoWayTimeOut) ("," timeouts+=TwoWayTimeOut)?)? ")";
	public TwoWayTimeOutsElements getTwoWayTimeOutsAccess() {
		return (pTwoWayTimeOuts != null) ? pTwoWayTimeOuts : (pTwoWayTimeOuts = new TwoWayTimeOutsElements());
	}
	
	public ParserRule getTwoWayTimeOutsRule() {
		return getTwoWayTimeOutsAccess().getRule();
	}

	//TwoWayTimeOut:
	//	OneWayTimeOut | ResponseTimeOut;
	public TwoWayTimeOutElements getTwoWayTimeOutAccess() {
		return (pTwoWayTimeOut != null) ? pTwoWayTimeOut : (pTwoWayTimeOut = new TwoWayTimeOutElements());
	}
	
	public ParserRule getTwoWayTimeOutRule() {
		return getTwoWayTimeOutAccess().getRule();
	}

	//ResponseTimeOut:
	//	"response" "=" timeout=TimeOut;
	public ResponseTimeOutElements getResponseTimeOutAccess() {
		return (pResponseTimeOut != null) ? pResponseTimeOut : (pResponseTimeOut = new ResponseTimeOutElements());
	}
	
	public ParserRule getResponseTimeOutRule() {
		return getResponseTimeOutAccess().getRule();
	}

	//Protocol:
	//	ProtocolReference | ProtocolDeclaration;
	public ProtocolElements getProtocolAccess() {
		return (pProtocol != null) ? pProtocol : (pProtocol = new ProtocolElements());
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}

	//ProtocolReference:
	//	"protocol" name=ProtocolName;
	public ProtocolReferenceElements getProtocolReferenceAccess() {
		return (pProtocolReference != null) ? pProtocolReference : (pProtocolReference = new ProtocolReferenceElements());
	}
	
	public ParserRule getProtocolReferenceRule() {
		return getProtocolReferenceAccess().getRule();
	}

	//ProtocolName:
	//	QualifiedName;
	public ProtocolNameElements getProtocolNameAccess() {
		return (pProtocolName != null) ? pProtocolName : (pProtocolName = new ProtocolNameElements());
	}
	
	public ParserRule getProtocolNameRule() {
		return getProtocolNameAccess().getRule();
	}

	//ProtocolDeclaration:
	//	"protocol" name=ProtocolName "{" ("message" messages+=MessageName)+ "}";
	public ProtocolDeclarationElements getProtocolDeclarationAccess() {
		return (pProtocolDeclaration != null) ? pProtocolDeclaration : (pProtocolDeclaration = new ProtocolDeclarationElements());
	}
	
	public ParserRule getProtocolDeclarationRule() {
		return getProtocolDeclarationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
