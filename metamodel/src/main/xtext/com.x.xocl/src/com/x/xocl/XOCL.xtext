grammar com.x.xocl.XOCL with org.eclipse.xtext.common.Terminals

generate domainmodel "http://x.com/xocl/XOCL"

Domainmodel:
  (elements += TopLevelElement)*
;

TopLevelElement:
  Import | Package
;

Import:
  'import' package = QualifiedNameWithWildcard
;

QualifiedNameWithWildcard:
  PackageName '.*'?
;

PackageName:
  QualifiedName
;

QualifiedName:
  ID ('.' ID)*
;

Package:
  'package' name = PackageName (version = VersionString)?
  '{'
    (elements += PackageElement)+
  '}'
;

VersionString:
  TwoPartVersionString | FourPartVersionString
;

TwoPartVersionString:
  major = INT '.' minor = INT
;

FourPartVersionString:
  TwoPartVersionString release = '.' INT build = '.' INT
;

PackageElement:
  Partner | Process | Entity | Workflow | Transaction | Protocol
;

Partner:
  'partner' name = ID
  '{'
  	'responsibilities' '(' (responsibilities += [ProcessRole | QualifiedName]) (',' (responsibilities += [ProcessRole | QualifiedName]))* ')'
  '}'
;

Process:
  'process' name = ID
  '(' (roles += ProcessRole) (',' (roles += ProcessRole))+ ')'
  '{'
    'description' description = STRING
  	(preconditions = Preconditions)?
  	(postconditions = Postconditions)?
  '}'
;

ProcessRole:
  Role
;
 
 Role:
  name = ID
;

Preconditions:
  'preconditions' '(' (conditions += [EntityState | QualifiedName]) (',' conditions += [EntityState | QualifiedName])* ')'
;

Entity:
  'entity' name = ID 
  '{'
    (states += EntityState)+
  '}'
;

EntityState:
  'state' name = ID 
  ('[' (transitions += EntityStateTransition) (',' transitions += EntityStateTransition)* ']')?
;
 
EntityStateTransition :
  successor = [EntityState];

Postconditions:
  'postconditions' {Postconditions}
  '{'
    (success = OnProcessSuccess)?
    (failure = OnProcessFailure)?
  '}'
;

OnProcessResult:
  OnProcessSuccess | OnProcessFailure
;

OnProcessSuccess:
  'success' '[' (results += [EntityState | QualifiedName]) (',' results += [EntityState | QualifiedName])* ']'
;

OnProcessFailure:
  'failure' '[' (results += [EntityState | QualifiedName]) (',' results += [EntityState | QualifiedName])* ']'
;

Workflow:
  'workflow' name = ID 
  ('<' (variants += WorkflowVariant) (',' variants += WorkflowVariant)* '>')?
  roles = WorkflowRoles 
  contents = WorkflowBlock
;

WorkflowVariant:
  name = ID
;

WorkflowRoles:
  RoleDeclarations | ProcessReference
;

RoleDeclarations:
  '(' (roles += WorkflowRole) (',' (roles += WorkflowRole))+ ')'
;

WorkflowRole:
  Role
;

ProcessReference:
  'implements' implements = [Process | QualifiedName]
;

WorkflowBlock:
  '{'
    (elements += WorkflowElement)*
    (elements += EndPoint)
  '}'
;

EndPoint:
  (name = 'success') | (name = 'failure')
;

WorkflowElement:
  WorkflowBranch | WorkflowAction
;

WorkflowBranch:
  'branch'
  '{'
  	(conditions += BranchCondition)+
  '}'
;

BranchCondition:
  'condition' '(' BooleanExpression ')'
  contents = WorkflowBlock
;

BooleanExpression:
  STRING
;

WorkflowAction:
  TransactionCall | WorkflowCall
;

TransactionCall:
  'transaction' name = [Transaction | QualifiedName]
  ('<' (variants += TransactionVariantMapping) (',' variants += TransactionVariantMapping)* '>')?
  '(' (sender = SenderRoleMapping) ',' (receiver = ReceiverRoleMapping) ')'
;

TransactionVariantMapping:
  parameter = [TransactionVariant | QualifiedName] '=' value = [WorkflowVariant]
;

SenderRoleMapping:
  parameter = 'sender' '=' value = [WorkflowRole]
;

ReceiverRoleMapping:
  parameter = 'receiver' '=' value = [WorkflowRole]
;

WorkflowCall:
  'workflow' name = [Workflow | QualifiedName]
  ('<' (variants += WorkflowVariantMapping) (',' variants += WorkflowVariantMapping)* '>')?
  '(' (roles += WorkflowRoleMapping) (',' roles += WorkflowRoleMapping)+ ')'
;

WorkflowVariantMapping:
  parameter = [WorkflowVariant | QualifiedName] '=' value = [WorkflowVariant]
;

WorkflowRoleMapping:
  parameter = [WorkflowRole | QualifiedName] '=' value = ([WorkflowRoleReference | QualifiedName])
;

WorkflowRoleReference:
  ProcessRole | WorkflowRole
;

Transaction:
  InformTransaction | NotifyTransaction | RequestTransaction
;

InformTransaction:
  pattern = 'inform' name = ID
  ('<' (variants += TransactionVariant) (',' variants += TransactionVariant)* '>')?
  '{'
  	'send' sendAction = DatagramAction
   	(postconditions = Postconditions)?
  '}'
;

TransactionVariant:
  name = ID
;

DatagramAction:
  {DatagramAction}
  '{'
    (messages = VariantMessageMappings)?
    (requires = RequiredFeatures)?
  '}'	
;

VariantMessageMappings:
  'messages' '{' (variants += VariantMessageMapping) (',' (variants += VariantMessageMapping))* '}'
;

VariantMessageMapping:
  variant = [TransactionVariant] '<' (mappings += MessageMapping) (',' (mappings += MessageMapping))* '>'
;

MessageMapping:
  parameter = MessageName '=' value = MessageName
;

MessageName:
  QualifiedName
;

RequiredFeatures:
  'requires' '(' (features += RequiredFeature) (',' (features += RequiredFeature))? ')'
;

RequiredFeature:
  AuthorizationFeature | NonRepudiationFeature
;

AuthorizationFeature:
  authorization ?= 'authorization'
;

NonRepudiationFeature:
  nonrepudiation ?= 'nonrepudiation'
;

NotifyTransaction:
  pattern = 'notify' name = ID
  ('<' (variants += TransactionVariant) (',' variants += TransactionVariant)* '>')?
  '{'
 	'send' sendAction = OneWayAction
  	(postconditions = Postconditions)?
  '}'
;

OneWayAction: 
  '{'
    (messages = VariantMessageMappings)?
    (requires = RequiredFeatures)?
    timeouts = OneWayTimeOuts
    'retries' '=' retries = INT
  '}'
;

OneWayTimeOuts:
  'timeouts' '(' (timeouts += OneWayTimeOut) (',' (timeouts += OneWayTimeOut))? ')'
;

OneWayTimeOut:
  ReceiptAckTimeOut | ValidationAckTimeOut
;

ReceiptAckTimeOut:
  'receipt' '=' timeout = TimeOut
;

TimeOut:
  value = INT unit = TimeUnit
;

enum TimeUnit:
  SECONDS = 's' | MINUTES = 'm' | HOURS = 'h' | DAYS = 'd'
;

ValidationAckTimeOut:
  'validation' '=' timeout = TimeOut
;

enum Pattern:
  Response = 'response' | Confirm = 'confirm' | Query = 'query' | Obligation = 'obligation'
;

RequestTransaction:
  pattern = Pattern name = ID
  ('<' (variants += TransactionVariant) (',' variants += TransactionVariant)* '>')?
  '{'
 	'send' sendAction = TwoWayAction
 	'receive' receiveAction = OneWayAction
  	(postconditions = Postconditions)?
  '}'
;

TwoWayAction: 
  '{'
    (messages = VariantMessageMappings)?
    (requires = RequiredFeatures)?
    timeouts = TwoWayTimeOuts
    'retries' '=' retries = INT
  '}'
;

TwoWayTimeOuts:
  'timeouts' '(' (timeouts += TwoWayTimeOut) ((',' (timeouts += TwoWayTimeOut)) (',' (timeouts += TwoWayTimeOut))?)? ')'
;

TwoWayTimeOut:
  OneWayTimeOut | ResponseTimeOut
;

ResponseTimeOut:
  'response' '=' timeout = TimeOut
;

Protocol:
  ProtocolReference | ProtocolDeclaration
;

ProtocolReference:
  'protocol' name = ProtocolName
;

ProtocolName:
  QualifiedName
;

ProtocolDeclaration:
  'protocol' name = ProtocolName
  '{'
    ('message' messages += MessageName)+
  '}'
;
