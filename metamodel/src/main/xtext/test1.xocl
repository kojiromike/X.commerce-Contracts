package com.x.test.test1 1.0.0.132
{
	partner OutsourceOrderManager
	{
		responsibilities(FulfillOrder.OrderManager)
	}
	
	entity Order
	{
		state Created[Validated, Flagged]
		state Validated[Prepared, Cancelled]
		state Flagged[Corrected, Cancelled]
		state Corrected[Prepared, Cancelled]
		state Prepared[Shipped, Cancelled]
		state Shipped[Delivered, Returned]
		state Delivered[Returned, Completed]
		state Returned[Cancelled]
		state Cancelled
		state Completed
	}
	
	entity InventoryReservation
	{
		state Reserved[Committed, Cancelled]
		state Committed
		state Cancelled
	}
	
	entity Shipment
	{
		state Prepared[Shipped, Cancelled]
		state Shipped[Delivered, Returned]
		state Cancelled
		state Delivered
		state Returned
	}
	
	process FulfillOrder(OrderManager, OrderFulfiller, InventoryManager, WarehouseManager, ShippingManager, ShippingCarrier, OfferManager)
	{
		description "Merchant fulfills the sales-channel order from Buyer using Merchant Console"
		preconditions(Order.Created, InventoryReservation.Reserved)
		postconditions
		{
		  success[Order.Shipped]
		  failure[Order.Cancelled]
		}
	}
	
	workflow FulfillOrder<variant1, variant2> implements FulfillOrder
	{
		transaction OrderCreated<OrderCreated.variantA=variant1, OrderCreated.variantB=variant2>(sender=OrderManager, receiver=OrderFulfiller)
		transaction PrepareOrder(sender=OrderFulfiller, receiver=WarehouseManager)
		branch
		{
			condition("Order.Prepared")
			{
				transaction ShipOrder(sender=OrderManager, receiver=ShippingManager)
				transaction IventoryUpdated(sender=InventoryManager, receiver=OfferManager)
				success
			}
			condition("Order.Cancelled")
			{
				failure			
			}
		}
		success
	}

	notify OrderCreated<variantA, variantB>
	{
		send 
		{
			messages
			{
				variantA<OrderCreated=OrderCreatedA>
			}
			requires(authorization, nonrepudiation)
			timeouts(receipt=1h, validation=24h)
			retries=3
		}
	}
	
	response PrepareOrder
	{
		send 
		{
			requires(authorization)
			timeouts(response=3d, receipt=1h, validation=24h)
			retries=3
		}
		receive
		{
			requires(authorization)
			timeouts(receipt=1h, validation=24h)
			retries=3
		}
		postconditions
		{
		  success[Order.Prepared]
		  failure[Order.Cancelled]
		}
	}		

	response ShipOrder
	{
		send 
		{
			requires(authorization)
			timeouts(response=3d, receipt=1h, validation=24h)
			retries=3
		}
		receive
		{
			timeouts(receipt=1h, validation=24h)
			retries=3
		}
		postconditions
		{
		  success[Order.Shipped]
		  failure[Order.Cancelled]
		}
	}		

	notify IventoryUpdated
	{
		send 
		{
			requires(authorization)
			timeouts(receipt=1h, validation=24h)
			retries=3
		}
	}	
}